{
  "openapi": "3.0.0",
  "paths": {
    "/resources/plans/v1/tenant/{tenantId}": {
      "get": {
        "operationId": "PlansControllerV1_getTenantPlans",
        "x-tag": "Plans",
        "summary": "Get Tenant Plans",
        "description": "Retrieve a paginated list of plans belongs to the tenant, with the abillity to search, order and filter by related entities",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Page offset of the results to return",
            "example": "0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "example": "10",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Search input, searchable by `name`",
            "example": "search-text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Field to order results by create date (`createdAt`) or expiration date (`expirationDate`)",
            "example": "name",
            "schema": {
              "enum": [
                "name",
                "createdAt"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "required": false,
            "in": "query",
            "description": "Sort type, ASC for ascending, DESC for descending",
            "example": "DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "excludeNonEntitledPlans",
            "required": false,
            "in": "query",
            "description": "Boolean value to include related entities in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PlanDto"
                          }
                        },
                        "hasNext": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Plans"
        ]
      }
    },
    "/resources/plans/v1": {
      "get": {
        "operationId": "PlansControllerV1_getPlans",
        "x-tag": "Plans",
        "summary": "Get Plans",
        "description": "Retrieve a paginated list of plans, with the abillity to search, order and filter by related entities",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Page offset of the results to return",
            "example": "0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "example": "10",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Search input, searchable by `name`",
            "example": "search-text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Field to order results by create date (`createdAt`) or expiration date (`expirationDate`)",
            "example": "name",
            "schema": {
              "enum": [
                "name",
                "createdAt"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "required": false,
            "in": "query",
            "description": "Sort type, ASC for ascending, DESC for descending",
            "example": "DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "featureIds",
            "required": false,
            "in": "query",
            "description": "Comma separated feature IDs to filter results by",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "userIds",
            "required": false,
            "in": "query",
            "description": "Comma separated user IDs to filter results by",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tenantIds",
            "required": false,
            "in": "query",
            "description": "Comma separated tenant IDs to filter results by",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PlanDto"
                          }
                        },
                        "hasNext": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Plans"
        ]
      },
      "post": {
        "operationId": "PlansControllerV1_createPlan",
        "x-tag": "Plans",
        "summary": "Create Plan",
        "description": "Create a new plan",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDto"
                }
              }
            }
          }
        },
        "tags": [
          "Plans"
        ]
      }
    },
    "/resources/plans/v1/{id}": {
      "get": {
        "operationId": "PlansControllerV1_getSinglePlan",
        "x-tag": "Plans",
        "summary": "Get Single Plan",
        "description": "Retrieve a single plan, including features linked to it",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDto"
                }
              }
            }
          }
        },
        "tags": [
          "Plans"
        ]
      },
      "patch": {
        "operationId": "PlansControllerV1_updatePlan",
        "x-tag": "Plans",
        "summary": "Update Plan",
        "description": "Update an existing plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDto"
                }
              }
            }
          }
        },
        "tags": [
          "Plans"
        ]
      },
      "delete": {
        "operationId": "PlansControllerV1_deletePlan",
        "x-tag": "Plans",
        "summary": "Delete Plan",
        "description": "Delete a plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Plans"
        ]
      }
    },
    "/resources/plans/v1/{id}/features": {
      "get": {
        "operationId": "PlansControllerV1_getPlanFeatures",
        "x-tag": "Plans",
        "summary": "Get Plan Features",
        "description": "Retrieve a paginated list of plan features, with the abillity to search and order (by date (`createdAt`) or expiration date (`expirationDate`))",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Page offset of the results to return",
            "example": "0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "example": "10",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Search input; Searchable fields: `name`",
            "example": "search-text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Order fields by date created (`createdAt`) or expired (`expirationDate`)",
            "example": "key",
            "schema": {
              "enum": [
                "name",
                "key",
                "createdAt"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "required": false,
            "in": "query",
            "description": "Sort fields by an ascending (`ASC`) or a decending (`DESC`) order",
            "example": "ASC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "featureIds",
            "required": false,
            "in": "query",
            "description": "Comma separated feature IDs that can be used to filter the results",
            "example": [
              "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "permissionKeys",
            "required": false,
            "in": "query",
            "description": "Comma separated permission keys that can be used to filter the results",
            "example": [
              "permission.read",
              "permission.write"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "hasFeatureFlag",
            "required": false,
            "in": "query",
            "description": "Filter out features that are linked/not linked to feature-flag",
            "example": "flase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "featureKeys",
            "required": false,
            "in": "query",
            "description": "Comma separated feature Keys that can be used to filter the results",
            "example": [
              "test-feature"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PlanFeatureDto"
                          }
                        },
                        "hasNext": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Plans"
        ]
      }
    },
    "/resources/plans/v1/{id}/features/link": {
      "patch": {
        "operationId": "PlansControllerV1_linkFeaturesToPlan",
        "x-tag": "Plans",
        "summary": "Link Features to Plan",
        "description": "Link features to plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkFeaturesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Plans"
        ]
      }
    },
    "/resources/plans/v1/{id}/features/unlink": {
      "patch": {
        "operationId": "PlansControllerV1_unlinkFeaturesFromPlan",
        "x-tag": "Plans",
        "summary": "Unlink Features from Plan",
        "description": "Unlink features from a given plan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkFeaturesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Plans"
        ]
      }
    },
    "/resources/routes/v1": {
      "get": {
        "operationId": "RoutesControllerV1_getMany",
        "x-tag": "API Access Control",
        "summary": "Get Routes",
        "description": "Retrieve all routes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control"
        ]
      },
      "post": {
        "operationId": "RoutesControllerV1_create",
        "x-tag": "API Access Control",
        "summary": "Create Route",
        "description": "Create a new route",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRouteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteDto"
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control"
        ]
      }
    },
    "/resources/routes/v1/{id}": {
      "get": {
        "operationId": "RoutesControllerV1_getSingle",
        "x-tag": "API Access Control",
        "summary": "Get Single Route",
        "description": "Retrieve a single route",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteDto"
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control"
        ]
      },
      "delete": {
        "operationId": "RoutesControllerV1_delete",
        "x-tag": "API Access Control",
        "summary": "Delete Route",
        "description": "Delete a route",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "API Access Control"
        ]
      },
      "patch": {
        "operationId": "RoutesControllerV1_update",
        "x-tag": "API Access Control",
        "summary": "Update Route",
        "description": "Update an existing route",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRouteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouteDto"
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control"
        ]
      }
    },
    "/resources/routes/v1/import-open-api": {
      "post": {
        "operationId": "RoutesControllerV1_importOpenApi",
        "x-tag": "API Access Control",
        "summary": "Import Open API",
        "description": "Imports an Open API specifications in JSON format",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "API Access Control"
        ]
      }
    },
    "/resources/routes/v1/{id}/rules": {
      "put": {
        "operationId": "RoutesControllerV1_replaceRules",
        "x-tag": "API Access Control",
        "summary": "Create or Replace Route Rules",
        "description": "Create or replace route rules",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceRouteRulesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RouteRuleDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control"
        ]
      }
    },
    "/resources/routes/v1/configuration": {
      "get": {
        "operationId": "RoutesConfigurationsControllerV1_getRoutesConfiguration",
        "x-tag": "API Access Control Configurations",
        "summary": "Get Routes Configuration",
        "description": "Retrieve routes configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesConfigurationDto"
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control Configurations"
        ]
      },
      "patch": {
        "operationId": "RoutesConfigurationsControllerV1_updateRoutesConfiguration",
        "x-tag": "API Access Control Configurations",
        "summary": "Update Routes Configuration",
        "description": "Update route configurations",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoutesConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoutesConfigurationDto"
                }
              }
            }
          }
        },
        "tags": [
          "API Access Control Configurations"
        ]
      }
    },
    "/resources/features/v1": {
      "get": {
        "operationId": "FeaturesControllerV1_getFeatures",
        "x-tag": "Features",
        "summary": "Get Features",
        "description": "Retrieve a paginated list of features. You can search for specific features or order them by field",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Page offset of the results to return",
            "example": "0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "example": "10",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Search input; Searchable fields: `name`",
            "example": "search-text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Order fields by date created (`createdAt`) or expired (`expirationDate`)",
            "example": "key",
            "schema": {
              "enum": [
                "name",
                "key",
                "createdAt"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "required": false,
            "in": "query",
            "description": "Sort fields by an ascending (`ASC`) or a decending (`DESC`) order",
            "example": "ASC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "featureIds",
            "required": false,
            "in": "query",
            "description": "Comma separated feature IDs that can be used to filter the results",
            "example": [
              "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "permissionKeys",
            "required": false,
            "in": "query",
            "description": "Comma separated permission keys that can be used to filter the results",
            "example": [
              "permission.read",
              "permission.write"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "hasFeatureFlag",
            "required": false,
            "in": "query",
            "description": "Filter out features that are linked/not linked to feature-flag",
            "example": "flase",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "featureKeys",
            "required": false,
            "in": "query",
            "description": "Comma separated feature Keys that can be used to filter the results",
            "example": [
              "test-feature"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FeatureDto"
                          }
                        },
                        "hasNext": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Features"
        ]
      },
      "post": {
        "operationId": "FeaturesControllerV1_createFeature",
        "x-tag": "Features",
        "summary": "Create Feature",
        "description": "Create a new feature",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureDto"
                }
              }
            }
          }
        },
        "tags": [
          "Features"
        ]
      }
    },
    "/resources/features/v1/{featureId}": {
      "patch": {
        "operationId": "FeaturesControllerV1_updateFeature",
        "x-tag": "Features",
        "summary": "Update Feature",
        "description": "Update an existing feature",
        "parameters": [
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeatureDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Features"
        ]
      },
      "delete": {
        "operationId": "FeaturesControllerV1_deleteFeature",
        "x-tag": "Features",
        "summary": "Delete Feature",
        "description": "Delete a feature",
        "parameters": [
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Features"
        ]
      }
    },
    "/resources/features/v2": {
      "post": {
        "operationId": "FeaturesControllerV2_create",
        "x-tag": "Features",
        "summary": "Create Feature",
        "description": "Create a new feature",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeatureDtoV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureDto"
                }
              }
            }
          }
        },
        "tags": [
          "Features"
        ]
      }
    },
    "/resources/features/v2/{featureId}": {
      "patch": {
        "operationId": "FeaturesControllerV2_update",
        "x-tag": "Features",
        "summary": "Update Feature",
        "description": "Update an existing feature",
        "parameters": [
          {
            "name": "featureId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeatureDtoV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Features"
        ]
      }
    },
    "/resources/entitlements/v2": {
      "get": {
        "operationId": "EntitlementsControllerV2_getEntitlements",
        "x-tag": "Entitlements",
        "summary": "Get Entitlements",
        "description": "Retrieve a paginated list of Entitlements, with the ability to order, sort (`ASC` for ascending, `DESC` for descending), and filter results( expiration date (`expirationDate`) or create date (`createdAt`) fields",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Page offset of results to return",
            "example": "0",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "example": "10",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sortType",
            "required": false,
            "in": "query",
            "description": "Sort type, `ASC` for ascending, `DESC` for descending",
            "example": "DESC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "UUID string representing the plan ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planIds",
            "required": false,
            "in": "query",
            "description": "UUIDs string array representing the plan IDs",
            "example": "[\"e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3\"]",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "assignLevel",
            "required": false,
            "in": "query",
            "description": "Assign level, `USER` for user-level entitlements, `TENANT` for tenant-level entitlements",
            "example": "User",
            "schema": {
              "enum": [
                "USER",
                "TENANT"
              ],
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Field to order results by date (`createdAt`) or expiration date (`expirationDate`)",
            "example": "expirationDate",
            "schema": {
              "enum": [
                "expirationDate",
                "createdAt"
              ],
              "type": "string"
            }
          },
          {
            "name": "userIds",
            "required": false,
            "in": "query",
            "description": "Comma separated user IDs to filter results by",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tenantIds",
            "required": false,
            "in": "query",
            "description": "Comma separated tenant IDs to filter results by",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "withRelations",
            "required": false,
            "in": "query",
            "description": "Boolean value to include related entities in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/EntitlementDto"
                          }
                        },
                        "hasNext": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Entitlements"
        ]
      },
      "post": {
        "operationId": "EntitlementsControllerV2_createEntitlement",
        "x-tag": "Entitlements",
        "summary": "Create Entitlement",
        "description": "Create a new entitlement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntitlementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementDto"
                }
              }
            }
          }
        },
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/resources/entitlements/v2/batch": {
      "post": {
        "operationId": "EntitlementsControllerV2_createBatchEntitlements",
        "x-tag": "Entitlements",
        "summary": "Batch Create Entitlements",
        "description": "Batch create multiple entitlements in a single request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateManyEntitlementsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementIdsDto"
                }
              }
            }
          }
        },
        "tags": [
          "Entitlements"
        ]
      },
      "patch": {
        "operationId": "EntitlementsControllerV2_updateBatchEntitlements",
        "x-tag": "Entitlements",
        "summary": "Batch Update Entitlements",
        "description": "Batch update multiple entitlements in a single request",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateManyEntitlementsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Entitlements"
        ]
      },
      "delete": {
        "operationId": "EntitlementsControllerV2_deleteBatchEntitlements",
        "x-tag": "Entitlements",
        "summary": "Batch Delete Entitlements",
        "description": "Batch delete multiple entitlements in a single request",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "description": "UUID string that represents the entitlement ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/resources/entitlements/v2/{id}": {
      "get": {
        "operationId": "EntitlementsControllerV2_getSingleEntitlement",
        "x-tag": "Entitlements",
        "summary": "Get Single Entitlement",
        "description": "Retrieve a single entitlement by ID",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementDto"
                }
              }
            }
          }
        },
        "tags": [
          "Entitlements"
        ]
      },
      "patch": {
        "operationId": "EntitlementsControllerV2_updateEntitlement",
        "x-tag": "Entitlements",
        "summary": "Update Entitlement",
        "description": "Update an existing entitlement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntitlementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementDto"
                }
              }
            }
          }
        },
        "tags": [
          "Entitlements"
        ]
      },
      "delete": {
        "operationId": "EntitlementsControllerV2_deleteEntitlement",
        "x-tag": "Entitlements",
        "summary": "Delete Entitlement",
        "description": "Delete an entitlement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/resources/feature-flags/v1": {
      "get": {
        "operationId": "FeatureFlagsControllerV1_getFeatureFlags",
        "x-tag": "Feature Flags",
        "summary": "Get Feature Flags",
        "description": "Retrieve a paginated list of feature flags. You can search for specific feature flags or order them by field",
        "parameters": [
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Page offset of the results to return",
            "example": "0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results per page",
            "example": "10",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Search input, searchable by `name`",
            "example": "search-text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Field to order results by create date (`createdAt`) or name (`name`)",
            "example": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortType",
            "required": false,
            "in": "query",
            "description": "Sort type, ASC for ascending, DESC for descending",
            "example": "ASC",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FeatureFlagDto"
                          }
                        },
                        "hasNext": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Feature Flags"
        ]
      },
      "post": {
        "operationId": "FeatureFlagsControllerV1_createFeatureFlag",
        "x-tag": "Feature Flags",
        "summary": "Create Feature Flag",
        "description": "Create a new feature flag",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeatureFlagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagDto"
                }
              }
            }
          }
        },
        "tags": [
          "Feature Flags"
        ]
      }
    },
    "/resources/feature-flags/v1/{id}": {
      "get": {
        "operationId": "FeatureFlagsControllerV1_getSingleFeatureFlag",
        "x-tag": "Feature Flags",
        "summary": "Get Single Feature Flag",
        "description": "Retrieve a single feature flag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagDto"
                }
              }
            }
          }
        },
        "tags": [
          "Feature Flags"
        ]
      },
      "patch": {
        "operationId": "FeatureFlagsControllerV1_updateFeatureFlag",
        "x-tag": "Feature Flags",
        "summary": "Update Feature Flag",
        "description": "Update an existing feature flag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeatureFlagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagDto"
                }
              }
            }
          }
        },
        "tags": [
          "Feature Flags"
        ]
      },
      "delete": {
        "operationId": "FeatureFlagsControllerV1_deleteFeatureFlag",
        "x-tag": "Feature Flags",
        "summary": "Delete Feature Flag",
        "description": "Delete a feature flag",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Feature Flags"
        ]
      }
    }
  },
  "info": {
    "title": "Entitlements Overview",
    "description": {
      "$ref": "descriptions/entitlements.md"
    },
    "version": ""
  },
  "servers": [
    {
      "url": "https://api.frontegg.com/entitlements",
      "description": "EU Region"
    },
    {
      "url": "https://api.us.frontegg.com/entitlements",
      "description": "US Region"
    },
    {
      "url": "https://api.ca.frontegg.com/entitlements",
      "description": "CA Region"
    },
    {
      "url": "https://api.au.frontegg.com/entitlements",
      "description": "AU Region"
    },
    {
      "url": "https://{domain}.frontegg.com/entitlements",
      "description": "Frontegg sub-domain for use with user tokens",
      "variables": {
        "domain": {
          "default": "app-xxx"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "PageDto": {
        "type": "object",
        "properties": {}
      },
      "ConditionDto": {
        "type": "object",
        "properties": {
          "attribute": {
            "type": "string",
            "description": "String representing an attribute with a subset of condition(s) that is used in code to enact targeting rules",
            "example": "myCustomAttribute"
          },
          "attributeType": {
            "type": "string",
            "description": "Enum that represents the attribute type (`frontegg` or `custom`)",
            "example": "custom",
            "enum": [
              "custom",
              "frontegg"
            ]
          },
          "negate": {
            "type": "boolean",
            "description": "Boolean that indicates whether the condition should negate the operation",
            "example": false
          },
          "op": {
            "type": "string",
            "description": "Enum that represents the operation applied to the condition",
            "example": "in_list",
            "enum": [
              "in_list",
              "starts_with",
              "ends_with",
              "contains",
              "matches",
              "equal",
              "greater_than",
              "greater_than_equal",
              "lower_than",
              "lower_than_equal",
              "between_numeric",
              "is",
              "on",
              "between_date",
              "on_or_after",
              "on_or_before"
            ]
          },
          "value": {
            "type": "object",
            "description": "Object that contains the condition data according to selected operation, each operation requires different structure (see [documentation](https://docs.frontegg.com/docs/entitlements-backend-sdk#operations-and-corresponding-object-structure))",
            "example": {
              "list": [
                "valueA",
                "valueB"
              ]
            }
          }
        },
        "required": [
          "attribute",
          "attributeType",
          "negate",
          "op",
          "value"
        ]
      },
      "RuleDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "String that represents the description of the rule",
            "example": "This is the first rule"
          },
          "conditionLogic": {
            "type": "string",
            "description": "Enum that represents the rule conditions logic",
            "example": "and",
            "enum": [
              "and"
            ]
          },
          "conditions": {
            "description": "Array of conditions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionDto"
            }
          },
          "treatment": {
            "type": "string",
            "description": "String that represents the treatment for this rule",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          }
        },
        "required": [
          "description",
          "conditionLogic",
          "conditions",
          "treatment"
        ]
      },
      "PlanFeatureDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string representing the feature ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "permissions": {
            "description": "Array of permissions linked to a feature",
            "example": [
              "permission.read",
              "permission.write"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "key",
          "permissions"
        ]
      },
      "EntitlementPlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string that represents the plan ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "vendorId": {
            "type": "string",
            "description": "UUID string that represents the vendor ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "name": {
            "type": "string",
            "description": "String that represents the plan name",
            "example": "Test Plan"
          },
          "defaultTimeLimitation": {
            "type": "number",
            "description": "Number that represents the default time limitation in days for auto-assigned plans",
            "example": "30"
          },
          "description": {
            "type": "string",
            "description": "Feature plan description",
            "example": "This is a test plan"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when plan was created",
            "example": "2022-01-01T00:00:00"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when plan was last updated",
            "example": "2022-01-01T00:00:00"
          }
        },
        "required": [
          "id",
          "vendorId",
          "name",
          "createdAt"
        ]
      },
      "EntitlementDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string that represents the entitlement ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "planId": {
            "type": "string",
            "description": "UUID string that represents the plan ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "tenantId": {
            "type": "string",
            "description": "UUID string that represents the tenant ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "userId": {
            "type": "string",
            "description": "UUID string that represents the user ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of entitlement expiration",
            "example": "2022-01-01T12:00:00"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when entitlement was created",
            "example": "2022-01-01T12:00:00"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when entitlement was last updated",
            "example": "2022-01-01T12:00:00"
          },
          "plan": {
            "description": "Get the related plan object of the entitlement, in case `withRelations` is set to `true`",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementPlan"
              }
            ]
          }
        },
        "required": [
          "id",
          "planId",
          "tenantId",
          "createdAt",
          "plan"
        ]
      },
      "PlanDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string that represents the plan ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "vendorId": {
            "type": "string",
            "description": "UUID string that represents the vendor ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "name": {
            "type": "string",
            "description": "String that represents the plan name",
            "example": "Test Plan"
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "rules": {
            "description": "Array of rules that represents the set of conditions targeting the plan",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDto"
            }
          },
          "description": {
            "type": "string",
            "description": "Feature plan description",
            "example": "This is a test plan"
          },
          "metadata": {
            "type": "object",
            "description": "JSON String",
            "example": "{ \"some-key\": \"some-value\" }"
          },
          "defaultTimeLimitation": {
            "type": "number",
            "description": "Number that represents the default time limitation in days for auto-assigned plans",
            "example": "30"
          },
          "assignOnSignup": {
            "type": "boolean",
            "description": "Boolean indicating whether a plan is assigned automatically upon signup",
            "example": "true"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when plan was created",
            "example": "2022-01-01T00:00:00"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when plan was last updated",
            "example": "2022-01-01T00:00:00"
          },
          "features": {
            "description": "List of features linked to a plan",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanFeatureDto"
              }
            ]
          },
          "entitlements": {
            "description": "List of features linked to a plan",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "vendorId",
          "name",
          "assignOnSignup",
          "createdAt"
        ]
      },
      "CreatePlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String that represents the plan name",
            "example": "Test Plan"
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "rules": {
            "description": "Array of rules that represents the set of conditions targeting the plan",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDto"
            }
          },
          "description": {
            "type": "string",
            "description": "Feature plan description",
            "example": "This is a test plan"
          },
          "metadata": {
            "type": "string",
            "description": "JSON String",
            "example": "{ \"some-key\": \"some-value\" }"
          },
          "defaultTimeLimitation": {
            "type": "number",
            "description": "Number that represents the default time limitation in days for auto-assigned plans",
            "example": "30"
          },
          "assignOnSignup": {
            "type": "boolean",
            "description": "Boolean indicating whether a plan is assigned automatically upon signup",
            "example": "true",
            "default": false
          },
          "featureKeys": {
            "description": "Array of feature-keys to be applied on the plan",
            "example": "[\"my-cool-feature\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdatePlanDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String that represents the plan name",
            "example": "Test Plan"
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "rules": {
            "description": "Array of rules that represents the set of conditions targeting the plan",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDto"
            }
          },
          "description": {
            "type": "string",
            "description": "Feature plan description",
            "example": "This is a test plan"
          },
          "metadata": {
            "type": "string",
            "description": "JSON String",
            "example": "{ \"some-key\": \"some-value\" }"
          },
          "defaultTimeLimitation": {
            "type": "number",
            "description": "Number that represents the default time limitation in days for auto-assigned plans",
            "example": "30"
          },
          "assignOnSignup": {
            "type": "boolean",
            "description": "Boolean indicating whether a plan is assigned automatically upon signup",
            "example": "true"
          },
          "featureKeys": {
            "description": "Array of feature-keys to be applied on the plan",
            "example": "[\"my-cool-feature\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "LinkFeaturesDto": {
        "type": "object",
        "properties": {
          "featuresIds": {
            "description": "Array of UUID strings that represents the feature ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "featuresIds"
        ]
      },
      "UnlinkFeaturesDto": {
        "type": "object",
        "properties": {
          "featuresIds": {
            "description": "Array of UUID strings that represents the feature ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "featuresIds"
        ]
      },
      "RouteRuleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "b796239c-6641-4cf3-9ff3-658ad4049131",
            "description": ""
          },
          "routeId": {
            "type": "string",
            "readOnly": true,
            "example": "b796239c-6641-4cf3-9ff3-658ad4049131",
            "description": ""
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "feature",
            "enum": [
              "feature",
              "permission"
            ],
            "description": ""
          },
          "value": {
            "type": "string",
            "readOnly": true,
            "example": "my-feature-key",
            "description": ""
          }
        },
        "required": [
          "id",
          "routeId",
          "type",
          "value"
        ]
      },
      "RouteDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "b796239c-6641-4cf3-9ff3-658ad4049131",
            "description": ""
          },
          "method": {
            "type": "string",
            "readOnly": true,
            "example": "GET",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "*"
            ],
            "description": ""
          },
          "path": {
            "type": "string",
            "readOnly": true,
            "example": "/users",
            "description": ""
          },
          "priority": {
            "type": "number",
            "readOnly": true,
            "example": 100,
            "description": ""
          },
          "description": {
            "type": "string",
            "readOnly": true,
            "example": "This is an example route",
            "description": ""
          },
          "policyType": {
            "type": "string",
            "readOnly": true,
            "example": "allow",
            "enum": [
              "allow",
              "deny",
              "ruleBased"
            ],
            "description": ""
          },
          "rules": {
            "readOnly": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouteRuleDto"
            },
            "description": ""
          }
        },
        "required": [
          "id",
          "method",
          "path",
          "priority",
          "description",
          "policyType",
          "rules"
        ]
      },
      "CreateRouteDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "Http Method",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "*"
            ],
            "example": "GET"
          },
          "path": {
            "type": "string",
            "description": "Route path",
            "example": "/users"
          },
          "policyType": {
            "type": "string",
            "description": "Route policy type",
            "enum": [
              "allow",
              "deny",
              "ruleBased"
            ],
            "example": "allow"
          },
          "description": {
            "type": "string",
            "description": "Route description",
            "example": "This is an example route"
          }
        },
        "required": [
          "method",
          "path",
          "policyType",
          "description"
        ]
      },
      "UpdateRouteDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "Http Method",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE",
              "*"
            ],
            "example": "GET"
          },
          "path": {
            "type": "string",
            "description": "Route path",
            "example": "/users"
          },
          "policyType": {
            "type": "string",
            "description": "Route policy type",
            "enum": [
              "allow",
              "deny",
              "ruleBased"
            ],
            "example": "allow"
          },
          "description": {
            "type": "string",
            "description": "Route description",
            "example": "This is an example route"
          }
        },
        "required": [
          "method",
          "path",
          "policyType",
          "description"
        ]
      },
      "CreateRouteRuleDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Rule type - can be either \"feature\" or \"permission\"",
            "enum": [
              "feature",
              "permission"
            ],
            "example": "feature"
          },
          "value": {
            "type": "string",
            "description": "Rule value - represents a reference key to the rule type entity",
            "example": "my-feature-key"
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "ReplaceRouteRulesDto": {
        "type": "object",
        "properties": {
          "rules": {
            "description": "Set of route rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRouteRuleDto"
            }
          }
        },
        "required": [
          "rules"
        ]
      },
      "RoutesConfigurationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "b796239c-6641-4cf3-9ff3-658ad4049131",
            "description": ""
          },
          "vendorId": {
            "type": "string",
            "readOnly": true,
            "example": "b796239c-6641-4cf3-9ff3-658ad4049131",
            "description": ""
          },
          "accessControlMode": {
            "type": "string",
            "readOnly": true,
            "example": "monitor",
            "enum": [
              "guard",
              "monitor"
            ],
            "description": ""
          }
        },
        "required": [
          "id",
          "vendorId",
          "accessControlMode"
        ]
      },
      "UpdateRoutesConfigurationDto": {
        "type": "object",
        "properties": {
          "accessControlMode": {
            "type": "string",
            "description": "Access control mode",
            "example": "monitor",
            "enum": [
              "guard",
              "monitor"
            ]
          }
        },
        "required": [
          "accessControlMode"
        ]
      },
      "FeatureFlagDtoThin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string that represents the feature flag ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "name": {
            "type": "string",
            "description": "String that represent the feature flag name",
            "example": "Test Feature Flag"
          },
          "on": {
            "type": "boolean",
            "description": "Boolean indicating whether the feature flag is on",
            "example": true
          },
          "offTreatment": {
            "type": "string",
            "description": "Enum that represents the treatment in case feature flag is off",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "description": {
            "type": "string",
            "description": "String the represents the feature flag description",
            "example": "This is a test feature flag"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when feature flag was created",
            "example": "2022-01-01T00:00:00"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when feature flag was last updated",
            "example": "2022-01-01T00:00:00"
          }
        }
      },
      "FeatureDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string representing the feature ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "vendorId": {
            "type": "string",
            "description": "UUID string representing the vendor ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "metadata": {
            "type": "object",
            "description": "JSON String",
            "example": "{ \"some-key\": \"some-value\" }"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "This is a test feature"
          },
          "createdAt": {
            "type": "string",
            "description": "Date when a feature was created",
            "example": "2022-01-01T00:00:00"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date when a feature was last updated",
            "example": "2022-01-01T00:00:00"
          },
          "permissions": {
            "description": "Array of permissions linked to a feature",
            "example": [
              "permission.read",
              "permission.write"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "featureFlag": {
            "description": "Related Feature-Flag",
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureFlagDtoThin"
              }
            ]
          }
        },
        "required": [
          "id",
          "vendorId",
          "name",
          "key",
          "metadata",
          "createdAt"
        ]
      },
      "CreateFeatureDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "This is a test feature"
          },
          "permissions": {
            "description": "Array of permissions linked to a feature",
            "example": [
              "permission.read",
              "permission.write"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "key"
        ]
      },
      "UpdateFeatureDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "This is a test feature"
          },
          "permissions": {
            "description": "Array of permissions linked to a feature",
            "example": [
              "permission.read",
              "permission.write"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PermissionDto": {
        "type": "object",
        "properties": {
          "permissionKey": {
            "type": "string",
            "description": "Permission key",
            "example": "user.read"
          },
          "permissionId": {
            "type": "string",
            "description": "Permission identifier",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          }
        }
      },
      "CreateFeatureDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "This is a test feature"
          },
          "permissions": {
            "description": "Array of permissions linked to a feature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "metadata": {
            "type": "string",
            "description": "JSON String",
            "example": "{ \"some-key\": \"some-value\" }"
          }
        },
        "required": [
          "name",
          "key"
        ]
      },
      "UpdateFeatureDtoV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "description": {
            "type": "string",
            "description": "Feature description",
            "example": "This is a test feature"
          },
          "permissions": {
            "description": "Array of permissions linked to a feature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDto"
            }
          },
          "metadata": {
            "type": "string",
            "description": "JSON String",
            "example": "{ \"some-key\": \"some-value\" }"
          }
        }
      },
      "CreateEntitlementDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "UUID string that represents the plan ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "tenantId": {
            "type": "string",
            "description": "UUID string that represents the tenant ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "userId": {
            "type": "string",
            "description": "UUID string that represents the user ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of entitlement expiration",
            "example": "2022-01-01T12:00:00"
          }
        },
        "required": [
          "planId",
          "tenantId"
        ]
      },
      "CreateManyEntitlementsDto": {
        "type": "object",
        "properties": {
          "entitlements": {
            "description": "Array of entitlements to create",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateEntitlementDto"
            }
          }
        },
        "required": [
          "entitlements"
        ]
      },
      "EntitlementIdsDto": {
        "type": "object",
        "properties": {
          "entitlementIds": {
            "description": "UUID string that represents the entitlement ID",
            "example": [
              "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "entitlementIds"
        ]
      },
      "UpdateEntitlementWithIdDto": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of entitlement expiration",
            "example": "2022-01-01T12:00:00"
          },
          "id": {
            "type": "string",
            "description": "UUID string that represents the entitlement ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          }
        },
        "required": [
          "id"
        ]
      },
      "UpdateManyEntitlementsDto": {
        "type": "object",
        "properties": {
          "entitlements": {
            "description": "Array of entitlements to update",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpdateEntitlementWithIdDto"
            }
          }
        },
        "required": [
          "entitlements"
        ]
      },
      "UpdateEntitlementDto": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "format": "date-time",
            "type": "string",
            "description": "Date of entitlement expiration",
            "example": "2022-01-01T12:00:00"
          }
        }
      },
      "FeatureFlagFeature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string representing the feature ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "key": {
            "type": "string",
            "description": "String representing the feature key",
            "example": "test-feature"
          },
          "name": {
            "type": "string",
            "description": "String representing the feature name",
            "example": "Test Feature"
          }
        }
      },
      "FeatureFlagDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "UUID string that represents the feature flag ID",
            "example": "e6a5012c-cbeb-4c1e-ab80-e5f43efd44e3"
          },
          "name": {
            "type": "string",
            "description": "String that represent the feature flag name",
            "example": "Test Feature Flag"
          },
          "on": {
            "type": "boolean",
            "description": "Boolean indicating whether the feature flag is on",
            "example": true
          },
          "offTreatment": {
            "type": "string",
            "description": "Enum that represents the treatment in case feature flag is off",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "feature": {
            "description": "Object that represents the related feature",
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureFlagFeature"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "String the represents the feature flag description",
            "example": "This is a test feature flag"
          },
          "metadata": {
            "type": "string",
            "description": "JSON String that represents additional custom metadata to the feature flag entity",
            "example": "{}"
          },
          "rules": {
            "description": "Array of rules that represents the set of conditions targeting the feature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDto"
            }
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when feature flag was created",
            "example": "2022-01-01T00:00:00"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when feature flag was last updated",
            "example": "2022-01-01T00:00:00"
          }
        }
      },
      "CreateFeatureFlagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String that represent the feature flag name",
            "example": "Test Feature Flag"
          },
          "on": {
            "type": "boolean",
            "description": "Boolean indicating whether the feature flag is on",
            "example": true
          },
          "offTreatment": {
            "type": "string",
            "description": "Enum that represents the treatment in case feature flag is off",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "featureId": {
            "type": "string",
            "description": "UUID string that represents the related feature ID",
            "example": "26f1b6b8-0317-452c-becd-68a5f782417d "
          },
          "description": {
            "type": "string",
            "description": "String the represents the feature flag description",
            "example": "This is a test feature flag"
          },
          "metadata": {
            "type": "string",
            "description": "JSON String that represents additional custom metadata to the feature flag entity",
            "example": "{}"
          },
          "rules": {
            "description": "Array of rules that represents the set of conditions targeting the feature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDto"
            }
          }
        },
        "required": [
          "name",
          "on",
          "offTreatment",
          "defaultTreatment",
          "featureId"
        ]
      },
      "UpdateFeatureFlagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "String that represent the feature flag name",
            "example": "Test Feature Flag"
          },
          "on": {
            "type": "boolean",
            "description": "Boolean indicating whether the feature flag is on",
            "example": true
          },
          "offTreatment": {
            "type": "string",
            "description": "Enum that represents the treatment in case feature flag is off",
            "example": "false",
            "enum": [
              "true",
              "false"
            ]
          },
          "defaultTreatment": {
            "type": "string",
            "description": "Enum that represents the default treatment",
            "example": "true",
            "enum": [
              "true",
              "false"
            ]
          },
          "featureId": {
            "type": "string",
            "description": "UUID string that represents the related feature ID",
            "example": "26f1b6b8-0317-452c-becd-68a5f782417d "
          },
          "description": {
            "type": "string",
            "description": "String the represents the feature flag description",
            "example": "This is a test feature flag"
          },
          "metadata": {
            "type": "string",
            "description": "JSON String that represents additional custom metadata to the feature flag entity",
            "example": "{}"
          },
          "rules": {
            "description": "Array of rules that represents the set of conditions targeting the feature",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDto"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Management",
      "tags": [
        "Features",
        "Plans",
        "Entitlements",
        "Feature Flags",
        "API Access Control",
        "API Access Control Configs"
      ]
    }
  ]
}