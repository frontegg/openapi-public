{
  "openapi": "3.0.0",
  "paths": {
    "/resources/auth/v2/api-token": {
      "post": {
        "operationId": "AuthenticationApiTokenControllerV2_authApiToken",
        "summary": "Authenticate using API token",
        "description": "Authenticate an account (tenant) or user using an API token.\n\nTo authenticate, include your `clientId` and `secret` in the request body. You can locate these credentials in the Admin Portal âžœ **API Tokens**. Send the request to your Frontegg environment (e.g., `https://<your-subdomain>.frontegg.com`) rather than the default domain.\n\n**Refresh Token Rotation:** This endpoint enforces a rotation policy. Each API token supports up to **100 active refresh tokens**. When the 101st request is made using the same API token, the oldest refresh token is invalidated.\n\nUse this endpoint to securely authenticate automated services, back-end clients, or integrations that rely on static credentials.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthApiTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenAuthV2Response"
                }
              }
            }
          }
        },
        "tags": [
          "API token"
        ]
      }
    },
    "/resources/auth/v2/api-token/token/refresh": {
      "post": {
        "operationId": "AuthenticationApiTokenControllerV2_refreshToken",
        "summary": "Refresh API token",
        "description": "Refresh a JWT using a valid refresh token.\n\nTo obtain a new JWT and refresh token pair, include the refresh token in the request body. This is typically used to maintain an authenticated session without prompting the user to log in again.\n\nIf the provided refresh token is valid and not expired, the endpoint returns a new signed JWT and a new refresh token. If the token is invalid or has been revoked due to rotation limits, the request will fail with an authentication error.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshApiTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenAuthV2Response"
                }
              }
            }
          }
        },
        "tags": [
          "API token"
        ]
      }
    },
    "/resources/tenants/access-tokens/v1": {
      "post": {
        "operationId": "TenantAccessTokensV1Controller_createTenantAccessToken",
        "summary": "Create account (tenant) access token",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantAccessTokenResponse"
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ],
        "description": "Create an access token for a specific account (tenant)."
      },
      "get": {
        "operationId": "TenantAccessTokensV1Controller_getTenantAccessTokens",
        "summary": "Get account (tenant) access tokens",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTenantAccessTokensResponse"
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ],
        "description": "Retrieve all access tokens for a specific account (tenant)."
      }
    },
    "/resources/tenants/access-tokens/v1/{id}": {
      "delete": {
        "operationId": "TenantAccessTokensV1Controller_deleteTenantAccessToken",
        "summary": "Delete account (tenant) access token",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "API tokens"
        ],
        "description": "Delete an account (tenant) access token."
      }
    },
    "/resources/tenants/api-tokens/v1": {
      "post": {
        "operationId": "TenantApiTokensV1Controller_createTenantApiToken",
        "summary": "Create client credentials token",
        "description": "Do not use. Instead, use v2 of this route.",
        "deprecated": true,
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantApiTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTenantApiTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      },
      "get": {
        "operationId": "TenantApiTokensV1Controller_getTenantsApiTokens",
        "summary": "Get client credentials tokens",
        "description": "Retrieve all API tokens for a specific account (tenant).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTenantApiTokensResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      }
    },
    "/resources/tenants/api-tokens/v1/{id}": {
      "delete": {
        "operationId": "TenantApiTokensV1Controller_deleteTenantApiToken",
        "summary": "Delete client credentials token",
        "description": "Delete an account (tenant) API token.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "API tokens"
        ]
      },
      "patch": {
        "operationId": "TenantApiTokensV1Controller_updateTenantApiToken",
        "summary": "Update client credentials token",
        "description": "Update an account (tenant) API token.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApiTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTenantApiTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      }
    },
    "/resources/tenants/api-tokens/v2": {
      "post": {
        "operationId": "TenantApiTokensV2Controller_createTenantApiToken",
        "summary": "Create client credentials token",
        "description": "Create an account (tenant) API token.\n\nYou can retrieve roles and permissions via the API.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantApiTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTenantApiTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "API tokens"
        ]
      }
    },
    "/resources/tenants/invites/v1/user": {
      "get": {
        "operationId": "TenantInvitesController_getTenantInviteForUser",
        "summary": "Get account (tenant) invite of user",
        "description": "Retrieve an invitation for a specific user to join an account (tenant).",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations"
        ]
      },
      "post": {
        "operationId": "TenantInvitesController_createTenantInviteForUser",
        "summary": "Create account (tenant) invite for user",
        "description": "Create an invitation for a specific user to join an account (tenant).\n\nTo create a general invitation, use the general invitation route.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteTokenRequestForUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations"
        ]
      },
      "delete": {
        "operationId": "TenantInvitesController_deleteTenantInviteForUser",
        "summary": "Delete account (tenant) invite of user",
        "description": "Delete an invitation for a specific user to join an account (tenant).\n\nTo delete a general invitation, use the general invitation route.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Account invitations"
        ]
      },
      "patch": {
        "operationId": "TenantInvitesController_updateTenantInviteForUser",
        "summary": "Update account (tenant) invite of user",
        "description": "Update an invitation for a specific user to join an account (tenant).\n\nTo set a specific expiration time, use the `expiresInMinutes` parameter to define when the invitation will be invalidated. Use the `shouldSendEmail` Boolean parameter to control whether an invitation email is sent.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInviteTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations"
        ]
      }
    },
    "/resources/tenants/invites/v1/verify": {
      "post": {
        "operationId": "TenantInvitesController_verifyTenantInvite",
        "summary": "Verify account (tenant) invite",
        "description": "Verify an account (tenant) invitation.\n\nPass the invitation token as the `token` parameter.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyInviteTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations"
        ]
      }
    },
    "/resources/tenants/invites/v1/configuration": {
      "get": {
        "operationId": "getInvitationConfiguration",
        "summary": "Get account (tenant) invite configuration",
        "description": "Check whether account (tenant) invitations are enabled and whether notifications are active for your environment.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationConfigurationResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations"
        ]
      }
    },
    "/resources/tenants/invites/v1": {
      "post": {
        "operationId": "TenantInvitesController_createTenantInvite",
        "summary": "Create account (tenant) invite",
        "description": "Create a general or account (tenant)-specific invitation token.\n\nUse this endpoint to generate invitation tokens for accounts (tenants) or individual users.\n\nTo create a general invitation token, send the request without specifying an account (tenant) or user. To create an account (tenant)-specific token, include the account (tenant) ID in the request body. To create a token for a specific user of an account (tenant), also include the user ID in the body parameters. If a user ID is provided, you can control whether an invitation email is sent by setting the `shouldSendEmail` parameter.\n\nTo set a custom expiration time for the invitation, use the `expiresInMinutes` parameter to define when the token will expire.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInviteTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InviteTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations settings"
        ]
      }
    },
    "/resources/tenants/invites/v1/all": {
      "get": {
        "operationId": "TenantInvitesController_getAllInvites",
        "summary": "Get all account (tenant) invites",
        "description": "Retrieve all invitation tokens across all accounts (tenants).\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InviteTokenDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations settings"
        ]
      }
    },
    "/resources/tenants/invites/v1/token/{id}": {
      "delete": {
        "operationId": "TenantInvitesController_deleteTenantInvite",
        "summary": "Delete an account (tenant) invite",
        "description": "Delete an invitation for an account (tenant) using the invitation ID.\n\nUse this endpoint to delete a specific invitation by providing its invitation ID as a path parameter. You can obtain the invitation ID via the **Get all account (tenant) invites** API.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Account invitations settings"
        ]
      }
    },
    "/resources/configurations/v1/activation/strategies": {
      "get": {
        "operationId": "ActivationStrategyControllerV1_getActivationStrategy",
        "summary": "Get activation strategies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieve the current account activation strategies configured in your environment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStrategyResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations settings"
        ],
        "description": ""
      },
      "post": {
        "operationId": "ActivationStrategyControllerV1_createOrUpdateActivationStrategy",
        "summary": "Create or update activation strategy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateActivationStrategyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new activation strategy or update the existing activation strategy for your environment."
          }
        },
        "tags": [
          "Account invitations settings"
        ],
        "description": ""
      }
    },
    "/resources/configurations/v1/invitation/strategies": {
      "get": {
        "operationId": "InvitationStrategyControllerV1_getInvitationStrategy",
        "summary": "Get invitation strategies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Retrieve the current invitation strategies configured in your environment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationStrategyResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account invitations settings"
        ],
        "description": ""
      },
      "post": {
        "operationId": "InvitationStrategyControllerV1_createOrUpdateInvitationStrategy",
        "summary": "Create or update invitation strategy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateInvitationStrategyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a new invitation strategy or update the existing invitation strategy for your environment."
          }
        },
        "tags": [
          "Account invitations settings"
        ],
        "description": ""
      }
    },
    "/resources/roles/v2": {
      "get": {
        "operationId": "PermissionsControllerV2_getAllRoles",
        "summary": "Get roles v2",
        "description": "Retrieve all roles for your environment.\n\nEach role object includes the name, permissions, and other defining information.",
        "parameters": [
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 2000,
              "default": 50,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_sortBy",
            "required": true,
            "in": "query",
            "schema": {
              "enum": [
                "key",
                "name",
                "description",
                "isDefault",
                "firstUserRole",
                "level",
                "updatedAt",
                "createdAt",
                "permissions",
                "userTenants",
                "groups"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_levels",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": ""
          },
          {
            "name": "_tenantIds",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": ""
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "default": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/RoleResponse"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Account roles"
        ]
      },
      "post": {
        "operationId": "RolesControllerV2_addRole",
        "summary": "Create a new role",
        "description": "Add a new role for a specific account (tenant).\n\nInclude the required permissions in the request body to customize the role.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRoleWithPermissionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddRoleWithPermissionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Account roles"
        ]
      }
    },
    "/resources/roles/v2/distinct-levels": {
      "get": {
        "operationId": "RolesControllerV2_getDistinctLevels",
        "summary": "Get distinct levels of roles",
        "description": "Retrieve all role levels for your environment.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Account roles"
        ]
      }
    },
    "/resources/roles/v2/distinct-tenants": {
      "get": {
        "operationId": "RolesControllerV2_getDistinctTenants",
        "summary": "Get distinct assigned accounts (tenants) of roles",
        "description": "Retrieve all assigned account (tenant) IDs from roles for your environment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Account roles"
        ]
      }
    },
    "/resources/configurations/v1": {
      "post": {
        "operationId": "VendorConfigController_addOrUpdateConfig",
        "summary": "Update identity management configuration",
        "description": "Update the identity management configuration for your environment.\n\nUse this endpoint to add or update identity management parameters by sending the desired values in the request body.\n\nRefer to the parameter documentation for the list of supported values.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VendorConfigRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Core settings"
        ]
      },
      "get": {
        "operationId": "VendorConfigController_getVendorConfig",
        "summary": "Get identity management configuration",
        "description": "Retrieve the identity management configuration for your environment.\n\nUse this endpoint to get the current identity management settings configured in your environment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Core settings"
        ]
      }
    },
    "/resources/configurations/v1/captcha-policy": {
      "post": {
        "operationId": "CaptchaPolicyController_createCaptchaPolicy",
        "summary": "Create captcha policy",
        "description": "Create a CAPTCHA policy for all accounts (tenants).\n\nProvide the required settings in the request body. To enable the policy, set the `enabled` parameter to `true`, and provide the `siteKey` and `secretKey` obtained from reCAPTCHA. You can also set the `minimumScore` parameter to a value between `0` and `1` to define the minimum score threshold.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptchaPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptchaPolicyResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Core settings"
        ]
      },
      "put": {
        "operationId": "CaptchaPolicyController_updateCaptchaPolicy",
        "summary": "Update captcha policy",
        "description": "Update the CAPTCHA policy for all accounts (tenants).\n\nProvide the desired settings in the request body. To enable the policy, set the `enabled` parameter to `true`, and provide the `siteKey` and `secretKey` obtained from reCAPTCHA. You can also set the `minimumScore` parameter to a value between `0` and `1` to define the minimum score threshold.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptchaPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptchaPolicyResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Core settings"
        ]
      },
      "get": {
        "operationId": "CaptchaPolicyController_getCaptchaPolicy",
        "summary": "Get captcha policy",
        "description": "Retrieve the CAPTCHA policy for your environment.\n\nThe response includes the policy ID, `siteKey`, `secretKey`, `minimumScore`, list of ignored emails, and whether the policy is enabled.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptchaPolicyResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Core settings"
        ]
      }
    },
    "/resources/configurations/v1/basic": {
      "get": {
        "operationId": "VendorConfigController_getVendorConfigBasic",
        "summary": "Get identity management configuration",
        "description": "Retrieve the identity management configuration for your environment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorConfigBasicResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Core settings"
        ]
      }
    },
    "/resources/sso/custom/v1": {
      "post": {
        "operationId": "CustomSsoV1Controller_createSsoProvider",
        "summary": "Create custom oauth provider",
        "description": "Create a custom social login provider using the OAuth details of the identity provider.\n\nProvide the required OAuth parameters in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomSsoRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Custom social OAuth provider"
        ]
      },
      "get": {
        "operationId": "SsoV2Controller_getSsoProviders",
        "summary": "Get custom oauth provider",
        "description": "Retrieve the custom social login providers configured in your environment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Custom social OAuth provider"
        ]
      }
    },
    "/resources/sso/custom/v1/{id}": {
      "patch": {
        "operationId": "CustomSsoV1Controller_updateSsoProvider",
        "summary": "Update custom oauth provider",
        "description": "Update a custom social login provider in your environment by ID.\n\nProvide the ID of the custom social login provider and the desired OAuth parameters in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomSsoRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Custom social OAuth provider"
        ]
      },
      "delete": {
        "operationId": "CustomSsoV1Controller_deleteCustomSsoConfig",
        "summary": "Delete custom oauth provider",
        "description": "Delete a custom social login provider in your environment by ID.\n\nProvide the ID of the custom social login provider to delete.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Custom social OAuth provider"
        ]
      }
    },
    "/resources/migrations/v1/auth0": {
      "post": {
        "operationId": "UsersControllerV1_migrateUserFromAuth0",
        "summary": "Migrate from Auth0",
        "description": "Migrate users from Auth0 into your environment.\n\nProvide the `domain`, `clientId`, `secret`, and `tenantIdFieldName` parameters in the request body. These values can be obtained from your Auth0 account (tenant) configuration.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth0Configuration"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Data migration"
        ]
      }
    },
    "/resources/migrations/v1/local": {
      "post": {
        "operationId": "UsersControllerV1_migrateUserForVendor",
        "summary": "Migrate a single user",
        "description": "Migrate a user into your environment.\n\nProvide the required fields: user's email, `tenantId`, and metadata. You can also include additional properties such as the user's name, phone number, hashed password, and other optional attributes.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Data migration"
        ]
      }
    },
    "/resources/migrations/v1/local/bulk": {
      "post": {
        "operationId": "UsersControllerV1_bulkMigrateUserForVendor",
        "summary": "Migrate users in bulk",
        "description": "Migrate users in bulk into your environment.\n\nProvide an array of `users` in the request body. Each user object must include the user's `email` and `tenantId`, which specifies the user's parent account. You can include additional fields as needed to store more information. If you need to store custom data, use the `metadata` property.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateUsersRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationContext"
                }
              }
            }
          }
        },
        "tags": [
          "Data migration"
        ]
      }
    },
    "/resources/migrations/v1/local/bulk/status/{migrationId}": {
      "get": {
        "operationId": "UsersControllerV1_checkBulkMigrationStatus",
        "summary": "Check status of bulk migration",
        "description": "Retrieve the status of a pending or completed migration.\n\nThe response includes the migration's `state`, the number of migrated users, and any errors that occurred during the migration. The response payload is limited to 1,000 users.",
        "parameters": [
          {
            "name": "migrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrationObject"
                }
              }
            }
          }
        },
        "tags": [
          "Data migration"
        ]
      }
    },
    "/resources/configurations/v1/delegation": {
      "get": {
        "operationId": "DelegationConfigurationControllerV1_getDelegationConfiguration",
        "x-vendor-only": "true",
        "summary": "Get delegation configuration",
        "description": "Retrieve the delegation configuration for your environment.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDelegationConfigurationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Delegation"
        ]
      },
      "post": {
        "operationId": "DelegationConfigurationControllerV1_createOrUpdateDelegationConfiguration",
        "x-vendor-only": "true",
        "summary": "Create or update delegation configuration",
        "description": "Enable or disable delegation in the token exchange flow.\n\nUse this endpoint to update the delegation configuration by enabling or disabling delegation for the token exchange flow.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDelegationConfigurationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Delegation"
        ]
      }
    },
    "/resources/configurations/restrictions/v1/email-domain": {
      "post": {
        "operationId": "DomainRestrictionsController_createDomainRestriction",
        "summary": "Create domain restriction",
        "description": "This route creates a new domain restriction for an account (tenant). Send values in the POST body as objects. See the dropdowns for available values for each object param.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainRestrictionsCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainRestrictionsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Domain restrictions"
        ]
      },
      "get": {
        "operationId": "DomainRestrictionsController_getDomainRestrictions",
        "summary": "Get domain restrictions",
        "description": "Retrieve the domain restrictions for an account (tenant).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DomainRestrictionsResponse"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Domain restrictions"
        ]
      }
    },
    "/resources/configurations/restrictions/v1/email-domain/config": {
      "get": {
        "operationId": "DomainRestrictionsController_getDomainRestrictionsConfig",
        "summary": "Get domain restrictions",
        "description": "Retrieve the domain restrictions for an account (tenant).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainRestrictionsConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Domain restrictions"
        ]
      },
      "post": {
        "operationId": "DomainRestrictionsController_updateDomainRestrictionsConfig",
        "summary": "Change domain restrictions config list type and toggle it off/on",
        "description": "Update the domain restrictions configuration.\n\nYou can toggle the domain restriction check on or off.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainRestrictionsConfigUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainRestrictionsConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Domain restrictions"
        ]
      }
    },
    "/resources/configurations/restrictions/v1/email-domain/{id}": {
      "delete": {
        "operationId": "DomainRestrictionsController_deleteDomainRestriction",
        "summary": "Delete domain restriction",
        "description": "Delete a domain restriction.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Domain restrictions"
        ]
      }
    },
    "/resources/configurations/restrictions/v1/email-domain/replace-bulk": {
      "post": {
        "operationId": "DomainRestrictionsController_createBulkDomainsRestriction",
        "summary": "Replace bulk domain restriction",
        "description": "Replace all domain restrictions with the domains provided in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainRestrictionsBulkRequestRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainRestrictionsResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Domain restrictions"
        ]
      }
    },
    "/resources/mail/v1/configurations": {
      "post": {
        "operationId": "MailConfigController_createOrUpdateMailConfig",
        "summary": "Create or update configuration",
        "description": "Configure your SendGrid account to send emails from your environment.\n\nProvide your SendGrid secret key in the request body.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateMailConfigRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Email configuration"
        ]
      },
      "get": {
        "operationId": "MailConfigController_getMailConfig",
        "summary": "Get configuration",
        "description": "Retrieve the mail configuration for your SendGrid account.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMailConfigResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Email configuration"
        ]
      },
      "delete": {
        "operationId": "MailConfigController_deleteMailConfig",
        "summary": "Delete configuration",
        "description": "Delete the mail configuration for your SendGrid account.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email configuration"
        ]
      }
    },
    "/resources/mail/v2/configurations": {
      "post": {
        "operationId": "MailConfigController_createOrUpdateMailConfigV2",
        "summary": "Create or update configuration v2",
        "description": "Configure email settings for your environment, supporting SES, Mailgun, and SendGrid.\n\nProvide the email provider, sender details, and any additional parameters in the request body.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "payload": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/SendGridDto"
                      },
                      {
                        "$ref": "#/components/schemas/SesDto"
                      },
                      {
                        "$ref": "#/components/schemas/MailgunDto"
                      },
                      {
                        "$ref": "#/components/schemas/SesRoleDto"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Email configuration"
        ]
      }
    },
    "/resources/mail/v1/configs/templates": {
      "post": {
        "operationId": "MailV1Controller_addOrUpdateTemplate",
        "summary": "Add or update template",
        "description": "Create or update an email template for your environment.\n\nSpecify the email template using the `type` parameter. The value of `type` must match one of the predefined Frontegg email templates. Set the sender using the `senderEmail` parameter, and optionally include values for the other available body parameters. Provide the template information in the request body.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Email templates"
        ]
      },
      "get": {
        "operationId": "MailV1Controller_getTemplateConfiguration",
        "summary": "Get template",
        "description": "Retrieve all email templates for your environment.\n\nTo retrieve a specific template, pass its `type` as a query parameter.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ResetPassword",
                "ActivateUser",
                "InviteToTenant",
                "PwnedPassword",
                "MagicLink",
                "OTC",
                "ConnectNewDevice",
                "UserUsedInvitation",
                "ResetPhoneNumber",
                "BulkInvitesToTenant",
                "MFAEnroll",
                "MFAUnenroll",
                "NewMFAMethod",
                "MFARecoveryCode",
                "RemoveMFAMethod",
                "EmailVerification",
                "BruteForceProtection",
                "SuspiciousIP",
                "MFAOTC",
                "ImpossibleTravel",
                "BotDetection",
                "SmsAuthenticationEnabled",
                "UnlockUser",
                "UnlockUserSuccess",
                "ActivateUserWithCode",
                "InviteToTenantWithCode",
                "VerifyNewEmail",
                "EmailAddressChanged"
              ],
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTemplateResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Email templates"
        ]
      }
    },
    "/resources/mail/v1/configs/templates/{templateId}": {
      "delete": {
        "operationId": "MailV1Controller_deleteTemplate",
        "summary": "Delete template",
        "description": "Delete a specified email template.\n\nProvide the ID of the template to delete. You can obtain the template ID via the **Get template** API.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Email templates"
        ]
      }
    },
    "/resources/mail/v1/configs/{type}/default": {
      "get": {
        "operationId": "MailV1Controller_getDefaultTemplateConfiguration",
        "summary": "Get default template by type",
        "description": "Retrieve the default email template by type.\n\nPass the required `type` as a query parameter.",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "description": "The email template type",
            "schema": {
              "enum": [
                "ResetPassword",
                "ActivateUser",
                "InviteToTenant",
                "PwnedPassword",
                "MagicLink",
                "OTC",
                "ConnectNewDevice",
                "UserUsedInvitation",
                "ResetPhoneNumber",
                "BulkInvitesToTenant",
                "MFAEnroll",
                "MFAUnenroll",
                "NewMFAMethod",
                "MFARecoveryCode",
                "RemoveMFAMethod",
                "EmailVerification",
                "BruteForceProtection",
                "SuspiciousIP",
                "MFAOTC",
                "ImpossibleTravel",
                "BotDetection",
                "SmsAuthenticationEnabled",
                "UnlockUser",
                "UnlockUserSuccess",
                "ActivateUserWithCode",
                "InviteToTenantWithCode",
                "VerifyNewEmail",
                "EmailAddressChanged"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTemplateResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Email templates"
        ]
      }
    },
    "/resources/auth/v1/user": {
      "post": {
        "operationId": "AuthenticatioAuthenticationControllerV1_authenticateLocalUser",
        "summary": "Authenticate user with password",
        "description": "Authenticate a local user using their email and password.\n\nInclude the user's login credentials in the request body. This endpoint supports optional parameters such as an invitation token (for sign-up flows via invitation) and a reCAPTCHA token (if reCAPTCHA is enabled for login).\n\nIf the credentials are valid, the response includes a signed JWT and a refresh token that can be used for future authenticated requests.",
        "parameters": [
          {
            "name": "frontegg-vendor-host",
            "in": "header",
            "description": "The vendor host domain",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateUserPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/resources/auth/v1/user/token/refresh": {
      "post": {
        "operationId": "AuthenticatioAuthenticationControllerV1_refreshToken",
        "summary": "Refresh user JWT token ",
        "description": "Refresh a JWT based on the refresh token's expiration time.\n\nThis endpoint returns a new JWT and refresh token if the existing refresh token is valid and not expired. The request must include the refresh token cookie for the currently logged-in user.\n\nEnsure your JWT settings are properly configured in the Frontegg Portal to support this flow.",
        "parameters": [
          {
            "name": "frontegg-vendor-host",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/resources/auth/v1/logout": {
      "post": {
        "operationId": "AuthenticatioAuthenticationControllerV1_logout",
        "summary": "Logout user",
        "description": "Log out a user by invalidating their refresh token.\n\nThis endpoint logs out the currently authenticated user by invalidating the refresh token provided in the refresh token cookie.\n\nThis route is intended for applications using Frontegg's embedded login experience or for integrations that interact exclusively with Frontegg APIs.",
        "parameters": [
          {
            "name": "frontegg-vendor-host",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/resources/users/v1/signUp": {
      "post": {
        "operationId": "UsersControllerV1_signUpUser",
        "summary": "Signup user",
        "description": "Sign up a new user and create a new account (tenant).\n\nThis endpoint registers a user with authentication details such as `email`, `password`, and the `provider` used for authentication (e.g., `local`, `saml`, `google`, `github`). Refer to the documentation or dropdown menu for the full list of supported provider values.\n\nAdditional optional fields such as user metadata may also be included. If not needed, `metadata` can be passed as an empty object (e.g., `{}`).\n\nThis endpoint is typically used during account (tenant) onboarding or self-sign-up flows.",
        "parameters": [
          {
            "name": "frontegg-vendor-host",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-application-id",
            "in": "header",
            "description": "The application id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpUserEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpUserEmailDto"
                }
              }
            }
          }
        },
        "tags": [
          "General"
        ]
      }
    },
    "/resources/configurations/v1/restrictions/ip/config": {
      "post": {
        "operationId": "IPRestrictionsControllerV1_createDomainRestriction",
        "summary": "Create or update IP restriction configuration (ALLOW/BLOCK)",
        "description": "Create or update the IP restriction configuration.\n\nYou can configure IP restrictions as either ALLOW or BLOCK.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateIpRestrictionConfigDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "IP restrictions"
        ]
      },
      "get": {
        "operationId": "IPRestrictionsControllerV1_getIpRestrictionConfig",
        "summary": "Get IP restriction configuration (ALLOW/BLOCK)",
        "description": "Retrieve the IP restriction configuration for an account (tenant).\n\nThe configuration defines whether IP restrictions are set to ALLOW or BLOCK.",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "IP restrictions"
        ]
      }
    },
    "/resources/configurations/v1/restrictions/ip": {
      "get": {
        "operationId": "IPRestrictionsControllerV1_getAllIpRestrictions",
        "summary": "Get all IP restrictions",
        "description": "Retrieve the IP restrictions for an account (tenant).",
        "parameters": [
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetIpRestrictionResponse"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "IP restrictions"
        ]
      },
      "post": {
        "operationId": "IPRestrictionsControllerV1_createIpRestriction",
        "summary": "Create IP restriction",
        "description": "Create or update an IP restriction for an account (tenant).\n\nProvide the required values as objects in the request body. Refer to the parameter documentation for the list of supported values.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateIpRestrictionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "IP restrictions"
        ]
      }
    },
    "/resources/configurations/v1/restrictions/ip/verify": {
      "post": {
        "operationId": "IPRestrictionsControllerV1_testCurrentIp",
        "summary": "Test Current IP",
        "description": "Check if the current IP is allowed based on the IP restriction configuration.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "IP restrictions"
        ]
      }
    },
    "/resources/configurations/v1/restrictions/ip/verify/allow": {
      "post": {
        "operationId": "testCurrentIpInAllowList",
        "summary": "Test current IP is in allow list",
        "description": "This route checks if current ip is active in the allow list.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "IP restrictions"
        ]
      }
    },
    "/resources/configurations/v1/restrictions/ip/{id}": {
      "delete": {
        "operationId": "IPRestrictionsControllerV1_deleteIpRestrictionById",
        "summary": "Delete IP restriction by IP",
        "description": "Delete an IP restriction.\n\nProvide the IP restriction ID as a path parameter.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "IP restrictions"
        ]
      }
    },
    "/resources/configurations/v1/lockout-policy": {
      "post": {
        "operationId": "LockoutPolicyController_createLockoutPolicy",
        "summary": "Create lockout policy",
        "description": "Create a lockout policy for all accounts (tenants).\n\nTo enable the lockout policy, set the `enabled` parameter to `true` and configure the `maximumAttempts` value as desired.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockoutPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockoutPolicyResponse"
                }
              }
            }
          },
          "409": {
            "description": "Lockout Policy already exists"
          }
        },
        "tags": [
          "Lockout policy"
        ]
      },
      "patch": {
        "operationId": "LockoutPolicyController_updateLockoutPolicy",
        "summary": "Update lockout policy",
        "description": "Update the lockout policy for all accounts (tenants).\n\nTo disable the lockout policy, set the `enabled` parameter to `false`. You can also update the `maximumAttempts` value as desired.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockoutPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockoutPolicyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Lockout Policy not found. Try to use the Create Lockout Policy API"
          }
        },
        "tags": [
          "Lockout policy"
        ]
      },
      "get": {
        "operationId": "LockoutPolicyController_getLockoutPolicy",
        "summary": "Get lockout policy",
        "description": "Retrieve the lockout policy for all accounts (tenants) or for a specific account (tenant).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockoutPolicyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Lockout policy is not defined"
          }
        },
        "tags": [
          "Lockout policy"
        ]
      }
    },
    "/resources/vendor-only/users/access-tokens/v1/active": {
      "get": {
        "operationId": "VendorOnlyUserAccessTokensV1Controller_getActiveAccessTokens",
        "summary": "Get active access tokens list",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "M2M tokens"
        ],
        "description": "Retrieve the list of active access tokens for a specified account (tenant).\n\nPass the account's `frontegg-tenant-id` as a query parameter."
      }
    },
    "/resources/vendor-only/users/access-tokens/v1/{id}": {
      "get": {
        "operationId": "VendorOnlyUserAccessTokensV1Controller_getUserAccessTokenData",
        "summary": "Get user access token data",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserAccessTokenResponse"
                }
              }
            }
          }
        },
        "tags": [
          "M2M tokens"
        ],
        "description": "Retrieve data for a specific user access token.\n\nPass the account's `frontegg-tenant-id` as a query parameter and the access token `id` as a path parameter."
      }
    },
    "/resources/vendor-only/tenants/access-tokens/v1/{id}": {
      "get": {
        "operationId": "VendorOnlyTenantAccessTokensV1Controller_getTenantAccessTokenData",
        "summary": "Get account (tenant) access token data",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTenantAccessTokenResponse"
                }
              }
            }
          }
        },
        "tags": [
          "M2M tokens"
        ],
        "description": "Retrieve data for a specific account (tenant) access token.\n\nPass the account's `frontegg-tenant-id` as a query parameter and the access token `id` as a path parameter."
      }
    },
    "/resources/auth/v1/user/mfa/recover": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_recoverMfa",
        "summary": "Recover MFA",
        "description": "Recover multi-factor authentication (MFA) for a non-logged-in user.\n\nThis endpoint verifies a user's identity using a backup recovery code, typically generated by the user's MFA authenticator app during initial setup.\n\nUse this when a user cannot access their MFA device and needs to authenticate with their recovery code.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverMfaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/disable": {
      "post": {
        "operationId": "UsersMfaControllerV1_disableAuthAppMfa",
        "summary": "Disable authenticator app MFA",
        "description": "Disable MFA enrollment for a logged-in user within a specific account (tenant).\n\nThis endpoint disables multi-factor authentication for a user, using the `mfaToken` obtained from the user's authenticator app.\n\nUse this endpoint to programmatically disable MFA when managing authentication settings at the account (tenant) level.",
        "deprecated": true,
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableMFAAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/authenticator/{deviceId}/disable/verify": {
      "post": {
        "operationId": "UsersMfaControllerV1_disableAuthenticatorMfa",
        "summary": "Disable authenticator app MFA",
        "description": "Disable multi-factor authentication (MFA) enrollment for a logged-in user within a specific account (tenant).\n\nThis endpoint removes MFA for a user, typically used in administrative contexts where a backend system or admin manages user security settings.\n\nThe request must include the `mfaToken`, which is the time-based one-time password (TOTP) generated by the user's authenticator app.\n\nUse this endpoint to programmatically disable MFA for a specific user within an account (tenant).",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableMFAAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/sms/{deviceId}/disable": {
      "post": {
        "operationId": "UsersMfaControllerV1_preDisableSMSMfa",
        "summary": "Pre-disable SMS MFA",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestDisableMFARequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDisableMFASMSResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Initiate the process of disabling SMS-based multi-factor authentication (MFA) for a specific device.\n\nProvide the target `deviceId` in the request path to mark the SMS MFA device for pre-disablement. This action prepares the device for subsequent steps required to complete the removal.\n\nUse this route as part of the MFA management flow for disabling SMS-based MFA on a per-device basis."
      }
    },
    "/resources/users/v1/mfa/sms/{deviceId}/disable/verify": {
      "post": {
        "operationId": "UsersMfaControllerV1_disableSMSMfa",
        "summary": "Disable SMS MFA",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableMFASMSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Complete the process of disabling SMS-based multi-factor authentication (MFA) for a specific device.\n\nThis step finalizes MFA deactivation for the given `deviceId` after a prior pre-disable action.\n\nThe request must include:\n- `otcToken`: The one-time challenge token obtained during the pre-disable step.\n- `code`: The SMS verification code received by the user.\n\nUse this endpoint as the second step in the SMS MFA removal flow to verify the user's identity and confirm the disable action."
      }
    },
    "/resources/auth/v1/user/mfa/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_verifyAuthenticatorMfaCode",
        "summary": "Verify MFA using code from authenticator app",
        "description": "Verify a multi-factor authentication (MFA) code generated by an authenticator app during the authentication process.\n\nThis endpoint completes the MFA step by validating the provided code.\n\nThe request must include:\n- `value`: The MFA service name (e.g., `authenticator`), as configured in your Authentication Settings.\n- `mfaToken`: The time-based one-time password (TOTP) generated by the user's authenticator app.\n\nUse this endpoint to verify the user's MFA code during an authentication challenge, typically after the primary login step.",
        "deprecated": true,
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMFAAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/auth/v1/user/mfa/emailcode": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_preVerifyEmailOtcMfa",
        "summary": "Request verify MFA using email code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestVerifyMfaRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Verify multi-factor authentication (MFA) using a code sent to the user's email.\n\nThis endpoint completes the email-based MFA verification step.\n\nThe request must include:\n- `mfaToken`: The token provided after the user initiates MFA via email.\n\nUse this endpoint to confirm the email-based MFA challenge and finalize the login or authentication process."
      }
    },
    "/resources/auth/v1/user/mfa/emailcode/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_verifyEmailOtcMfa",
        "summary": "Verify MFA using email code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMFAEmailOTCRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Verify a multi-factor authentication (MFA) challenge using a code sent to the user's email address.\n\nThis endpoint finalizes the email-based MFA verification and completes the authentication process.\n\nThe request must include:\n- `otcToken`: One-time challenge token received during the email MFA initiation.\n- `code`: The MFA code sent to the user's email.\n- `mfaToken`: Token returned from the original MFA setup or step-up authentication request.\n- `rememberDevice` (optional): If set to `true`, the device will be remembered to reduce MFA prompts on future logins from the same client.\n\nUse this endpoint to confirm the MFA challenge and optionally remember the current device for future sessions."
      }
    },
    "/resources/auth/v1/user/mfa/authenticator/enroll": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_preEnrollAuthenticatorMfa",
        "summary": "Pre enroll MFA using Authenticator App",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestEnrollMFARequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Initiate enrollment in multi-factor authentication (MFA) using an authenticator app (e.g., Google Authenticator, Authy).\n\nThis endpoint begins the MFA setup process and returns the necessary data for configuring an authenticator app, such as a QR code or secret key.\n\nThe request must include:\n- `mfaToken`: A token received from the initial authentication flow that authorizes the MFA setup.\n\nUse this endpoint to generate the configuration required for linking an authenticator app before completing verification."
      }
    },
    "/resources/auth/v1/user/mfa/authenticator/enroll/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_enrollAuthenticatorMfa",
        "summary": "Enroll MFA using Authenticator App",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEnrollMFAAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Complete enrollment in multi-factor authentication (MFA) using an authenticator app.\n\nThis endpoint verifies the MFA setup by validating the time-based one-time password (TOTP) generated by the authenticator app.\n\nThe request must include:\n- `token`: The 6-digit TOTP code generated by the authenticator app.\n- `mfaToken`: Token from the initial MFA enrollment initiation.\n- `rememberDevice` (optional): If set to `true`, the device will be remembered and may skip MFA on future logins from the same browser or device.\n\nUse this endpoint to finalize MFA enrollment and activate the authenticator app for the user's account."
      }
    },
    "/resources/auth/v1/user/mfa/authenticator/{deviceId}/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_verifyAuthenticatorMfa",
        "summary": "Verify MFA using authenticator app",
        "description": "Verify multi-factor authentication (MFA) during the authentication process.\n\nThis endpoint is typically used after a primary login attempt when MFA is enabled for the user or account (tenant).\n\nThe request must include:\n- `value`: The MFA service name (e.g., `authenticator`, `email`, `sms`) configured under Authentication Settings.\n- `mfaToken`: The token or code provided by the user's MFA method (e.g., code from an authenticator app).\n\nUse this endpoint to complete the MFA verification step as part of the overall login flow.",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMFAAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/auth/v1/user/mfa/sms/enroll": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_preEnrollSmsMfa",
        "summary": "Pre-enroll MFA using sms",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestEnrollMFASMSRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Initiate multi-factor authentication (MFA) enrollment using SMS.\n\nThis endpoint begins the SMS-based MFA setup by sending a verification code to the provided phone number.\n\nThe request must include:\n- `phoneNumber`: The user's mobile phone number in international format. It must match the format defined in your organization's phone number validation pattern (`phoneNumberRegexp`).\n\nUse this endpoint as the first step in enabling SMS-based MFA for a user."
      }
    },
    "/resources/auth/v1/user/mfa/sms/enroll/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_enrollSmsMfa",
        "summary": "Enroll MFA using sms",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEnrollMFASMSRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Complete enrollment in multi-factor authentication (MFA) using SMS.\n\nThis endpoint finalizes the SMS-based MFA setup for the user by verifying the code sent to their phone number.\n\nThe request must include:\n- `otcToken`: Token received from the initial SMS MFA enrollment step.\n- `code`: The numeric code sent via SMS to the user's registered phone number.\n\nUse this endpoint to verify the user's phone number and activate SMS-based MFA on their account."
      }
    },
    "/resources/auth/v1/user/mfa/sms/{deviceId}": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_preVerifySmsMfa",
        "summary": "Request to verify MFA using sms",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestVerifyMfaRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Verify multi-factor authentication (MFA) using an SMS-based device.\n\nThis endpoint confirms the SMS MFA challenge as part of the authentication or step-up verification process for a specific registered device.\n\nPath parameters:\n- `deviceId`: The unique identifier of the SMS MFA device being verified.\n\nRequest body must include:\n- `mfaToken`: Token provided during the authentication or challenge flow.\n\nUse this endpoint to complete SMS-based MFA verification for the specified device."
      }
    },
    "/resources/auth/v1/user/mfa/sms/{deviceId}/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_verifySmsMfa",
        "summary": "Verify MFA using sms",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMFASMSRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Verify a multi-factor authentication (MFA) challenge using an SMS code for a specific registered device.\n\nThis endpoint finalizes the MFA step by validating the SMS code and may mark the device as trusted if specified.\n\nPath parameters:\n- `deviceId`: The unique identifier of the SMS MFA device being verified.\n\nRequest body must include:\n- `otcToken`: Token received from the SMS MFA challenge initiation.\n- `code`: The verification code sent to the user's phone via SMS.\n- `mfaToken`: MFA token issued during the initial login or step-up challenge.\n- `rememberDevice` (optional): Set to `true` to remember the device and reduce future MFA prompts on this device.\n\nUse this endpoint to complete SMS-based MFA verification and optionally trust the device for future logins."
      }
    },
    "/resources/auth/v1/user/mfa/webauthn/enroll": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_preEnrollWebauthnMfa",
        "summary": "Pre enroll MFA using WebAuthN",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestEnrollMFARequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Initiate multi-factor authentication (MFA) enrollment using WebAuthn (e.g., security keys, biometrics).\n\nThis endpoint begins the WebAuthn MFA setup by returning a browser-based challenge needed to link a trusted device, such as a biometric reader or hardware security key.\n\nThe request must include:\n- `mfaToken`: Token issued during the authentication flow to authorize MFA setup.\n\nUse this endpoint as the first step when enrolling a user in WebAuthn-based MFA."
      }
    },
    "/resources/auth/v1/user/mfa/webauthn/enroll/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_enrollWebauthnMfa",
        "summary": "Enroll MFA using WebAuthN",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEnrollMFAWebAuthnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Complete enrollment in multi-factor authentication (MFA) using WebAuthn.\n\nThis endpoint verifies and registers a WebAuthn device, such as a biometric sensor (Platform) or hardware security key (CrossPlatform), finalizing the setup after the initial challenge.\n\nThe request must include:\n- `deviceType`: Type of device being enrolled. Accepts `Platform` (e.g., fingerprint scanner) or `CrossPlatform` (e.g., USB security key).\n- `webauthnToken`: Token received during the WebAuthn pre-enrollment step.\n- `options`: WebAuthn attestation data collected from the client.\n  - `id`: Device identifier.\n  - `response`: WebAuthn attestation response.\n    - `clientDataJSON`: Base64-encoded client data from the browser.\n    - `attestationObject`: Base64-encoded attestation object from the authenticator.\n  - `deviceType` (optional): May repeat the selected device type.\n- `mfaToken`: Token used to authorize MFA enrollment.\n- `rememberDevice` (optional): Set to `true` to remember the device and reduce MFA prompts on future logins.\n\nUse this endpoint to complete WebAuthn-based MFA enrollment and register the user's trusted device."
      }
    },
    "/resources/auth/v1/user/mfa/webauthn/{deviceId}": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_preVerifyWebauthnMfa",
        "summary": "Request verify MFA using WebAuthN",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequestVerifyMfaRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Verify a multi-factor authentication (MFA) challenge using a registered WebAuthn device.\n\nThis endpoint completes WebAuthn-based MFA verification, typically following primary authentication when WebAuthn is required as a second factor.\n\nPath parameters:\n- `deviceId`: The unique identifier of the WebAuthn device to be verified.\n\nRequest body must include:\n- `mfaToken`: Token issued during the login or step-up authentication flow.\n\nUse this endpoint to validate a WebAuthn device and complete the MFA step during authentication."
      }
    },
    "/resources/auth/v1/user/mfa/webauthn/{deviceId}/verify": {
      "post": {
        "operationId": "AuthenticationMFAControllerV1_verifyWebauthnMfa",
        "summary": "Verify MFA using webauthn",
        "parameters": [
          {
            "name": "deviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyMFAWebAuthnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Verify a multi-factor authentication (MFA) challenge using a WebAuthn device.\n\nThis endpoint completes MFA verification using a previously registered WebAuthn device such as a biometric sensor or hardware security key.\n\nPath parameters:\n- `deviceId`: The unique identifier of the registered WebAuthn device to be verified.\n\nRequest body must include:\n- `webauthnToken`: Token received from the server to initiate the WebAuthn challenge.\n- `options`: WebAuthn authentication response returned by the browser.\n  - `id`: The credential ID of the WebAuthn device.\n  - `response`: Object containing attestation data from the authenticator.\n    - `clientDataJSON`: Base64-encoded client data.\n    - `authenticatorData`: Base64-encoded data from the authenticator.\n    - `signature`: Signature from the authenticator, proving user presence.\n    - `userHandle`: The user's handle used during registration.\n  - `recaptchaToken` (optional): Token to verify human interaction, if reCAPTCHA is enabled.\n  - `invitationToken` (optional): Used when completing an MFA challenge as part of an invitation flow.\n- `mfaToken`: Token issued during the initial authentication step.\n- `rememberDevice` (optional): If set to `true`, this device will be remembered for future logins to reduce MFA prompts.\n\nUse this endpoint to complete WebAuthn-based MFA verification and confirm the user's identity using a secure hardware or platform authenticator."
      }
    },
    "/resources/configurations/v1/mfa-policy/allow-remember-device": {
      "get": {
        "operationId": "SecurityPolicyController_checkIfAllowToRememberDevice",
        "summary": "Check if remember device allowed",
        "description": "Check whether the 'remember device' feature is allowed for MFA verification.\n\nThis endpoint returns whether device remembering is enabled globally or for a specific account (tenant), based on the request context.\n\nQuery parameters:\n- `mfaToken`: Token generated from the authenticator app or MFA challenge step.\n\nUse this endpoint to determine whether the user should be prompted with the option to remember their device during MFA verification.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mfaToken",
            "required": true,
            "in": "query",
            "description": "MFA token from the response body of the first factor authentication",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAllowRememberResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/enroll": {
      "post": {
        "operationId": "UsersMfaControllerV1_enrollAuthAppMfa",
        "summary": "Enroll authenticator app MFA",
        "description": "Enroll a logged-in user in multi-factor authentication (MFA) for a specific account (tenant).\n\nThis endpoint initiates MFA enrollment on behalf of a user within a specific account (tenant) context.\n\nUse this route to programmatically trigger MFA enrollment, typically as part of an administrative or backend workflow.",
        "deprecated": true,
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestEnrollAuthenticatorAppMfaResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/authenticator/enroll": {
      "post": {
        "operationId": "UsersMfaControllerV1_enrollAuthenticatorMfa",
        "summary": "Enroll authenticator app MFA",
        "description": "Enroll a logged-in user in multi-factor authentication (MFA) for a specific account (tenant).\n\nThis endpoint initiates MFA enrollment on behalf of a user within a specific account (tenant) context.\n\nUse this route to programmatically trigger MFA enrollment, typically as part of an administrative or backend workflow.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestEnrollAuthenticatorAppMfaResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/enroll/verify": {
      "post": {
        "operationId": "UsersMfaControllerV1_verifyAuthAppMfaEnrollment",
        "summary": "Verify authenticator app MFA enrollment",
        "description": "Verify multi-factor authentication (MFA) enrollment using a QR code for a specific user.\n\nThis endpoint completes MFA setup after the user scans a QR code with their authenticator app (e.g., Google Authenticator, Authy).\n\nRequest body must include:\n- `mfaToken`: The time-based one-time password (TOTP) generated by the user's authenticator app after scanning the QR code.\n\nUse this endpoint to confirm that the user has successfully linked their authenticator app and to activate MFA for their account.",
        "deprecated": true,
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEnrollMFAUserAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEnrollMFAResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/authenticator/enroll/verify": {
      "post": {
        "operationId": "UsersMfaControllerV1_verifyAuthenticatorMfaEnrollment",
        "summary": "Verify authenticator app MFA enrollment",
        "description": "Verify multi-factor authentication (MFA) enrollment using a QR code for a specific user within an account (tenant).\n\nThis endpoint completes MFA enrollment after the user scans a QR code with an authenticator app (e.g., Google Authenticator, Authy).\n\nRequest body must include:\n- `mfaToken`: The time-based one-time password (TOTP) generated by the authenticator app after scanning the QR code.\n\nUse this endpoint to confirm that the user has successfully registered their authenticator app and to activate MFA for their account.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEnrollMFAUserAuthAppRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyEnrollMFAResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA"
        ]
      }
    },
    "/resources/users/v1/mfa/sms/enroll": {
      "post": {
        "operationId": "UsersMfaControllerV1_preEnrollSmsMfa",
        "summary": "Enroll SMS MFA",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestEnrollMFASMSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Enroll a user in SMS-based multi-factor authentication (MFA).\n\nThis endpoint initiates SMS MFA enrollment by sending a verification code to the user's phone number.\n\nRequest body must include:\n- `phoneNumber`: The user's mobile number in international format. Must match the validation pattern defined by `phoneNumberRegexp`.\n\nUse this endpoint to begin the SMS MFA setup process for a specific user. The next step is to verify the SMS code to complete enrollment."
      }
    },
    "/resources/users/v1/mfa/sms/enroll/verify": {
      "post": {
        "operationId": "UsersMfaControllerV1_enrollSmsMfa",
        "summary": "Verify MFA enrollment",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEnrollMFASMSRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "MFA"
        ],
        "description": "Complete SMS-based multi-factor authentication (MFA) enrollment for a user.\n\nThis endpoint finalizes SMS MFA setup by verifying the code sent to the user's phone.\n\nRequest body must include:\n- `otcToken`: One-time challenge token received from the initial enrollment step.\n- `code`: The verification code sent to the user's phone via SMS.\n\nUse this endpoint to verify the user's phone number and activate SMS-based MFA for their account."
      }
    },
    "/resources/configurations/v1/mfa": {
      "post": {
        "operationId": "MfaController_upsertMfaConfig",
        "summary": "Update MFA configuration",
        "description": "Update the MFA configuration for your environment.\n\nProvide the desired configuration values as objects in the request body. Refer to the parameter documentation for the list of supported values.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaConfigRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA configuration"
        ]
      },
      "get": {
        "operationId": "MfaController_getMfaConfig",
        "summary": "Get MFA configuration",
        "description": "Retrieve the MFA configuration for your environment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA configuration"
        ]
      }
    },
    "/resources/configurations/v1/mfa-policy": {
      "post": {
        "operationId": "SecurityPolicyController_createMfaPolicy",
        "summary": "Create MFA policy",
        "description": "Create an MFA policy globally or for a specific account (tenant).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaPolicyResponse"
                }
              }
            }
          },
          "409": {
            "description": "MFA Policy already exists. Try to use the Update MFA Policy API"
          }
        },
        "tags": [
          "MFA settings"
        ]
      },
      "patch": {
        "operationId": "SecurityPolicyController_updateSecurityPolicy",
        "summary": "Update security policy",
        "description": "Update the MFA policy for all accounts (tenants).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaPolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing parameters to update"
          },
          "404": {
            "description": "Security policy not found"
          }
        },
        "tags": [
          "MFA settings"
        ]
      },
      "put": {
        "operationId": "SecurityPolicyController_upsertSecurityPolicy",
        "summary": "Upsert security policy",
        "description": "Create or update the MFA policy for all accounts (tenants).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MfaPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaPolicyResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA settings"
        ]
      },
      "get": {
        "operationId": "SecurityPolicyController_getSecurityPolicy",
        "summary": "Get security policy",
        "description": "This route gets the MFA policy for all accounts (tenants).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MfaPolicyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Security Policy not found. MFA is disabled"
          }
        },
        "tags": [
          "MFA settings"
        ]
      }
    },
    "/resources/configurations/v1/mfa/strategies": {
      "get": {
        "operationId": "MFAStrategiesControllerV1_getMFAStrategies",
        "summary": "Get MFA strategies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MFAStrategiesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "MFA settings"
        ],
        "description": "Retrieve the MFA strategies configured for your environment."
      },
      "post": {
        "operationId": "MFAStrategiesControllerV1_createOrUpdateMFAStrategy",
        "summary": "Create or update MFA strategy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateMFAStrategyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "MFA settings"
        ],
        "description": "Create or update an MFA strategy.\n\nProvide the desired strategy configuration in the request body."
      }
    },
    "/resources/configurations/v1/password": {
      "post": {
        "operationId": "PasswordPolicyController_addOrUpdatePasswordConfig",
        "summary": "Create or update password configuration",
        "description": "Create or update the password policy for the entire environment.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordConfigRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Password settings"
        ]
      },
      "get": {
        "operationId": "PasswordPolicyController_getPasswordConfig",
        "summary": "Get password policy configuration",
        "description": "Retrieve the password policy for all accounts (tenants).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/configurations/v1/password-history-policy": {
      "post": {
        "operationId": "PasswordHistoryPolicyController_createPolicy",
        "summary": "Create password history policy",
        "description": "Create a password history policy for all accounts (tenants).\n\nTo enable the password history policy, set the `enabled` parameter to `true` and specify the `passwordHistorySize` as a number between 1 and 10.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHistoryPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHistoryPolicyResponse"
                }
              }
            }
          },
          "409": {
            "description": "Policy already exists. Use the Update Password History Policy API."
          }
        },
        "tags": [
          "Password settings"
        ]
      },
      "patch": {
        "operationId": "PasswordHistoryPolicyController_updatePolicy",
        "summary": "Update password history policy",
        "description": "Update the password history policy for all accounts (tenants).\n\nTo disable the password history policy, set the `enabled` parameter to `false`. You can also update the `passwordHistorySize` value to a number between 1 and 10.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordHistoryPolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHistoryPolicyResponse"
                }
              }
            }
          },
          "404": {
            "description": "History size must to be between 1 to 10"
          }
        },
        "tags": [
          "Password settings"
        ]
      },
      "get": {
        "operationId": "PasswordHistoryPolicyController_getPolicy",
        "summary": "Get password history policy",
        "description": "Retrieve the password history policy for all accounts (tenants) or for a specific account (tenant).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordHistoryPolicyResponse"
                }
              }
            }
          },
          "404": {
            "description": "Password History Policy not found. Policy is disabled"
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v1/passwords/reset": {
      "post": {
        "operationId": "UsersPasswordControllerV1_resetPassword",
        "summary": "Reset password",
        "description": "Send a reset password email to a user.\n\nProvide the user's email in the request body. If your email template uses metadata, include the email metadata in the request body as well.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v1/passwords/reset/verify": {
      "post": {
        "operationId": "UsersPasswordControllerV1_verifyResetPassword",
        "summary": "Verify password",
        "description": "Verify a user's password using a verification token.\n\nProvide the `userId`, `token`, and `password` in the request body. The `token` can be obtained using the route for generating a user password reset token.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v1/passwords/change": {
      "post": {
        "operationId": "UsersPasswordControllerV1_changePassword",
        "summary": "Change password",
        "description": "Change the password for a logged-in user.\n\nInclude the current and new passwords in the request body.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPasswordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v1/passwords/config": {
      "get": {
        "operationId": "UsersPasswordControllerV1_getUserPasswordConfig",
        "summary": "Get strictest password configuration",
        "description": "Retrieve the user's strictest password configuration.\n\nThis is useful when a user belongs to multiple accounts (tenants) with varying password complexity requirements. The route returns the strictest setting the user is subject to.",
        "parameters": [
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v2/passwords/reset/email": {
      "post": {
        "operationId": "UsersPasswordControllerV2_resetPasswordViaEmail",
        "summary": "Reset password via email",
        "description": "This route sends a reset password email to the user. Provide the user's email address in the body to initiate the reset process.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordViaSmsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v2/passwords/reset/sms": {
      "post": {
        "operationId": "UsersPasswordControllerV2_resetPasswordViaSms",
        "summary": "Reset password via SMS",
        "description": "This route sends a reset password SMS to the user. Send an OTC to the userâ€™s phone number in the POST body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPasswordViaSmsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/users/v2/passwords/reset/sms/verify": {
      "post": {
        "operationId": "UsersPasswordControllerV2_verifyResetPasswordViaSmsOtc",
        "summary": "Verify password reset code sent via SMS",
        "description": "This route verifies the OTC sent via SMS for the password reset process. Gets the OTC from the POST body and returns userId and reset token if valid.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPasswordViaSmsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPasswordViaSmsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/configurations/v1/password-rotation": {
      "get": {
        "operationId": "PasswordRotationConfigControllerV1_getPasswordRotationConfiguration",
        "summary": "Get password expiration period configuration",
        "description": "Retrieve the password expiration period configuration for your environment or for a specific account (tenant).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordRotationConfigurationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Password rotation configuration not found"
          }
        },
        "tags": [
          "Password settings"
        ]
      },
      "post": {
        "operationId": "PasswordRotationConfigControllerV1_upsertPasswordRotationConfiguration",
        "summary": "Manage password expiration",
        "description": "Create or update the configuration for the password expiration policy.\n\nIf no configuration exists, a default policy will be applied.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdatePasswordRotationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/configurations/v1/password-rotation/vendor": {
      "get": {
        "operationId": "PasswordRotationConfigControllerV1_getVendorPasswordRotationConfiguration",
        "summary": "Get environment configuration for password expiration period.",
        "description": "Retrieve the password expiration period configuration for your environment or for a specific account (tenant).",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordRotationConfigurationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Password rotation configuration not found"
          }
        },
        "tags": [
          "Password settings"
        ]
      }
    },
    "/resources/auth/v1/passwordless/smscode/prelogin": {
      "post": {
        "operationId": "AuthenticationPasswordlessControllerV1_smsCodePreLogin",
        "summary": "SMS code prelogin",
        "description": "Initiate SMS-based passwordless authentication by sending a one-time code (OTC) to the user's phone.\n\nThis is the first step in the SMS OTC passwordless login flow. The system sends an SMS to the user associated with the provided email address.\n\nRequest body must include:\n- `email`: The email address of the user initiating the login.\n- `invitationToken` (optional): Include if the user is signing up through an invitation.\n- `recaptchaToken` (optional): Required if reCAPTCHA is enabled for login.\n\nUse this endpoint to begin the passwordless login process using SMS verification.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordlessAuthenticationSmsOtcPreloginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordlessAuthenticationSmsOTCPreloginResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "User does not have a phone number"
          }
        },
        "tags": [
          "Passwordless"
        ]
      }
    },
    "/resources/auth/v1/passwordless/smscode/postlogin": {
      "post": {
        "operationId": "AuthenticationPasswordlessControllerV1_smsCodePostLogin",
        "summary": "SMS code postlogin",
        "description": "Complete passwordless authentication using a one-time code (OTC) sent via SMS.\n\nThis is the second step in the SMS OTC passwordless login flow. After the user receives the code, this endpoint finalizes authentication and returns a valid JWT and refresh cookie.\n\nRequest body must include:\n- `token`: The token ID associated with the SMS OTC sent to the user.\n- `invitationToken` (optional): Include if the user is signing up through an invitation.\n- `recaptchaToken` (optional): Required if reCAPTCHA is enabled for login.\n\nUse this endpoint to complete passwordless login via SMS and receive authentication tokens for the session.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateUserPasswordlessDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Passwordless"
        ]
      }
    },
    "/resources/auth/v1/passwordless/magiclink/prelogin": {
      "post": {
        "operationId": "AuthenticationPasswordlessControllerV1_magicLinkPrelogin",
        "summary": "Magic link prelogin",
        "description": "Initiate passwordless authentication by sending a magic link to the user's email address.\n\nThis is the first step in the magic link passwordless login flow for local users. The system sends an email containing a secure login link to the provided address.\n\nRequest body must include:\n- `email`: The email address of the user initiating the login.\n- `invitationToken` (optional): Include if the user is signing up through an invitation.\n- `recaptchaToken` (optional): Required if reCAPTCHA is enabled for login.\n\nUse this endpoint to start the magic link authentication process by delivering a login link to the user's email inbox.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordlessAuthenticationPreloginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Invalid authentication type, magic link authentication should be enabled"
          }
        },
        "tags": [
          "Passwordless"
        ]
      }
    },
    "/resources/auth/v1/passwordless/magiclink/postlogin": {
      "post": {
        "operationId": "AuthenticationPasswordlessControllerV1_magicLinkPostLogin",
        "summary": "Magic link postlogin",
        "description": "Complete passwordless authentication using a magic link.\n\nThis is the second step in the magic link passwordless login flow for local users. After the user clicks the link in their email, this endpoint validates the token and authenticates the user.\n\nRequest body must include:\n- `token`: The token ID extracted from the magic link.\n- `invitationToken` (optional): Include if the user is signing up through an invitation.\n- `recaptchaToken` (optional): Required if reCAPTCHA is enabled for login.\n\nUse this endpoint to complete the magic link login flow and receive authentication credentials, including a JWT and a refresh cookie.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateUserPasswordlessDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Passwordless"
        ]
      }
    },
    "/resources/auth/v1/passwordless/code/prelogin": {
      "post": {
        "operationId": "AuthenticationPasswordlessControllerV1_emailCodePrelogin",
        "summary": "OTC (One-Time Code) prelogin",
        "description": "Initiate passwordless authentication by sending a one-time code (OTC) to the user's email address.\n\nThis is the first step in the email OTC (one-time code) passwordless login flow for local users. The system sends a time-sensitive code to the specified email address.\n\nRequest body must include:\n- `email`: The email address of the user initiating the login.\n- `invitationToken` (optional): Include if the user is signing up through an invitation.\n- `recaptchaToken` (optional): Required if reCAPTCHA is enabled for login.\n\nUse this endpoint to start the passwordless login process via an email-based one-time code.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordlessAuthenticationPreloginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Invalid authentication type, OTC (One-Time Code) authentication should be enabled"
          }
        },
        "tags": [
          "Passwordless"
        ]
      }
    },
    "/resources/auth/v1/passwordless/code/postlogin": {
      "post": {
        "operationId": "AuthenticationPasswordlessControllerV1_emailCodePostLogin",
        "summary": "OTC (One-Time Code) postlogin",
        "description": "Complete passwordless authentication using a one-time code (OTC) sent to the user's email.\n\nThis is the second step in the email OTC passwordless login flow. After the user receives and enters the code, this endpoint validates the token and finalizes authentication.\n\nRequest body must include:\n- `token`: The token ID associated with the email OTC sent to the user.\n- `invitationToken` (optional): Include if the user is signing up via an invitation.\n- `recaptchaToken` (optional): Required if reCAPTCHA is enabled for login.\n\nUse this endpoint to validate the email-based one-time code and receive authentication credentials, including a JWT and refresh cookie.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticateUserPasswordlessDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Passwordless"
        ]
      }
    },
    "/resources/permissions/v1": {
      "get": {
        "operationId": "PermissionsControllerV1_getAllPermissions",
        "summary": "Get permissions",
        "description": "Retrieve all permissions configured for your environment.\n\nEach permission object includes the name, description, assigned roles, categories, and other defining information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "post": {
        "operationId": "PermissionsControllerV1_addPermissions",
        "summary": "Create permissions",
        "description": "Add a new permission.\n\nProvide the permission information in the request body.\n\nThis route does not associate permissions with roles. Use the associate permission to roles route to manage role associations.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddPermissionRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/resources/permissions/v1/{permissionId}": {
      "delete": {
        "operationId": "PermissionsControllerV1_deletePermission",
        "summary": "Delete permission",
        "description": "Delete a permission.\n\nProvide the permission ID as a path parameter to specify which permission to delete. You can obtain the permission ID using the **Get permissions** API.",
        "parameters": [
          {
            "name": "permissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "Permissions"
        ]
      },
      "patch": {
        "operationId": "PermissionsControllerV1_updatePermission",
        "summary": "Update permission",
        "description": "Update an existing permission.\n\nProvide the permission ID as a path parameter to specify which permission to update, and send the updated permission information in the request body.\n\nThis route does not update role associations for the permission. Use the associate permission to roles route to manage role associations.",
        "parameters": [
          {
            "name": "permissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/resources/permissions/v1/{permissionId}/roles": {
      "put": {
        "operationId": "PermissionsControllerV1_setRolesToPermission",
        "summary": "Set a permission to multiple roles",
        "description": "Associate a permission with multiple roles.\n\nProvide the permission ID as a path parameter and include the role IDs in the request body as an array of strings. Any pre-existing role associations will remain.\n\nYou can obtain role IDs using the **Get roles** API.",
        "parameters": [
          {
            "name": "permissionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRolesToPermissionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/resources/permissions/v1/classification": {
      "put": {
        "operationId": "PermissionsControllerV1_updatePermissionsAssignmentType",
        "summary": "Set permissions classification",
        "description": "Classify permissions for self-service usage.\n\nProvide an array of `permissionIds` and the classification `type` in the request body. This allows you to segregate which permissions will be used for self-service.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassifyPermissionsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/resources/permissions/v1/categories": {
      "get": {
        "operationId": "PermissionsCategoriesController_getAllCategoriesWithPermissions",
        "summary": "Get permissions categories",
        "description": "This route returns all permissions categories for a vendor. Each category is an object containing the name, description, permissions, and other defining information.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionCategoryResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Permissions categories"
        ]
      },
      "post": {
        "operationId": "PermissionsCategoriesController_createPermissionCategory",
        "summary": "Create category",
        "description": "Add a new permissions category.\n\nProvide the category information in the request body. Note that categories are not associated with permissions in this route â€” you can associate permissions by sending the category ID in the add or update permission routes.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionCategoryResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Permissions categories"
        ]
      }
    },
    "/resources/permissions/v1/categories/{categoryId}": {
      "patch": {
        "operationId": "PermissionsCategoriesController_updateCategory",
        "summary": "Update category",
        "description": "Update an existing permissions category.\n\nProvide the category ID as a path parameter to specify which category to update, and send the updated category information in the request body.\n\nThis route does not update the permissions associated with the category. Use the add or update permissions routes to manage permission associations.",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Permissions categories"
        ]
      },
      "delete": {
        "operationId": "PermissionsCategoriesController_deleteCategory",
        "summary": "Delete category",
        "description": "Delete a permissions category.\n\nProvide the category ID as a path parameter to specify which category to delete. You can obtain the category ID using the **Get categories** API.",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Permissions categories"
        ]
      }
    },
    "/resources/users/access-tokens/v1": {
      "post": {
        "operationId": "UserAccessTokensV1Controller_createUserAccessToken",
        "summary": "Create user access token",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAccessTokenResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Personal tokens"
        ],
        "description": "Create an access token for a specific user."
      },
      "get": {
        "operationId": "UserAccessTokensV1Controller_getUserAccessTokens",
        "summary": "Get user access tokens",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserAccessTokensResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Personal tokens"
        ],
        "description": "Retrieve all access tokens for a specific user."
      }
    },
    "/resources/users/access-tokens/v1/{id}": {
      "delete": {
        "operationId": "UserAccessTokensV1Controller_deleteUserAccessToken",
        "summary": "Delete user access token by token ID",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Personal tokens"
        ],
        "description": "Delete a user access token."
      }
    },
    "/resources/users/api-tokens/v1": {
      "post": {
        "operationId": "UserApiTokensV1Controller_createTenantApiToken",
        "summary": "Create user client credentials token",
        "description": "Create a user-specific API token.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserApiTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserApiTokenResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Personal tokens"
        ]
      },
      "get": {
        "operationId": "UserApiTokensV1Controller_getApiTokens",
        "summary": "Get user client credentials tokens",
        "description": "Retrieve a user-specific API token.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetUserApiTokensResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Personal tokens"
        ]
      }
    },
    "/resources/users/api-tokens/v1/{id}": {
      "delete": {
        "operationId": "UserApiTokensV1Controller_deleteApiToken",
        "summary": "Delete user client credentials token by token ID",
        "description": "Delete a user-specific API token.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Personal tokens"
        ]
      }
    },
    "/resources/roles/v1": {
      "get": {
        "operationId": "PermissionsControllerV1_getAllRoles",
        "summary": "Get roles",
        "description": "Retrieve all roles across all accounts (tenants).\n\nEach role object includes the name, permissions, and other defining information.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "post": {
        "operationId": "PermissionsControllerV1_addRoles",
        "summary": "Create roles",
        "description": "Add a new role across all accounts (tenants).\n\nThis route does not assign permissions to the role. Use the attach permissions to role route to manage role permissions.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddRoleRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/resources/roles/v1/{roleId}": {
      "delete": {
        "operationId": "PermissionsControllerV1_deleteRole",
        "summary": "Delete role",
        "description": "Delete a role.\n\nProvide the role ID as a path parameter to specify which role to delete.",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "operationId": "PermissionsControllerV1_updateRole",
        "summary": "Update role",
        "description": "Update an existing role.\n\nProvide the role ID as a path parameter to specify which role to update, and send the updated role information in the request body.\n\nThis route does not update permissions for the role. Use the attach permissions to role route to manage role permissions.\n\nYou can obtain the role ID using the **Get roles** API.",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/resources/roles/v1/{roleId}/permissions": {
      "put": {
        "operationId": "PermissionsControllerV1_setPermissionsToRole",
        "summary": "Assign permissions to a role",
        "description": "Assign permissions to a role.\n\nProvide the role ID as a path parameter and include the permission IDs in the request body as an array of strings. Any pre-existing permissions will be overridden by the new permissions.\n\nYou can obtain role IDs using the **Get roles** API and permission IDs using the **Get permissions** API.",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "For relating a role to a specific account (tenant), use `get accounts (tenants)` API to find the account (tenant) Ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPermissionToRoleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/resources/roles/v1/{roleId}/tenant": {
      "put": {
        "operationId": "PermissionsControllerV1_updateRoleTenant",
        "summary": "Update role tenant",
        "description": "Update the tenant ID for a specific role. This endpoint is vendor-only.",
        "parameters": [
          {
            "name": "roleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleTenantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/resources/users/phone-numbers/v1": {
      "get": {
        "operationId": "UserPhoneNumbersControllerV1_getAllPhoneNumbers",
        "summary": "Get all phone numbers",
        "description": "Retrieve a paginated list of all user phone numbers associated with your environment.\n\nThis endpoint returns user phone numbers along with pagination metadata and navigation links. It supports filtering, sorting, and offset-based pagination for efficient querying.\n\nQuery parameters (optional):\n- `_limit` (number â‰¥ 1): Maximum number of items to return per page.\n- `_offset` (number â‰¥ 0): Number of items to skip (for pagination).\n- `_sortBy` (string): Field to sort by. Allowed values: `userId`, `phoneNumber`.\n- `_order` (string): Sort order. Allowed values: `ASC`, `DESC`.\n- `_phoneNumber` (string): Filter by a specific phone number.\n\nUse this endpoint to list or search user phone numbers in a paginated format, ideal for administrative tools or reporting.",
        "parameters": [
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "userId",
                "phoneNumber"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_phoneNumber",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserPhoneNumberResponseDto"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "SMS"
        ]
      },
      "post": {
        "operationId": "UserPhoneNumbersControllerV1_createUserPhoneNumber",
        "summary": "Set phone number for a user",
        "description": "Assign a new phone number to a user and optionally trigger a verification code.\n\nBy default, the system sends an SMS verification code to the provided phone number. To skip verification (e.g., for internal setup), set the `verify` field to `false`.\n\nRequest body must include:\n- `phoneNumber`: The new phone number to assign to the user. Must follow international format.\n- `verify` (optional): Whether to send an SMS verification code. Defaults to `true` if not provided.\n\nUse this endpoint to set or update a user's phone number, with optional control over verification.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserPhoneNumberRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPhoneNumberCreatedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "SMS"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/preverify": {
      "post": {
        "operationId": "UserPhoneNumbersControllerV1_preVerifyUserPhoneNumber",
        "summary": "Pre-verify user's phone number",
        "description": "Send a one-time code (OTC) to the specified phone number to initiate verification.\n\nThis endpoint is used to pre-verify a phone number before associating it with a user account. It sends an SMS-based one-time code to the provided number.\n\nRequest body must include:\n- `phoneNumber`: The phone number to verify, in international format.\n\nUse this endpoint to validate ownership of a phone number by sending a one-time code for user input during onboarding or account setup.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreVerifyUserPhoneNumberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPhoneNumberCreatedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "SMS"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/verify": {
      "post": {
        "operationId": "UserPhoneNumbersControllerV1_verifyCreateUserPhoneNumber",
        "summary": "Verify creation of phone number for user",
        "description": "Verify a user's phone number using a one-time code (OTC) that was sent via SMS.\n\nThis is the final step in the phone number verification process. After initiating verification via the pre-verification route, use this endpoint to confirm the phone number by submitting the OTC and code.\n\nRequest body must include:\n- `otcToken`: The token issued when the OTC was sent.\n- `code`: The one-time code the user received on their phone.\n\nUse this endpoint to validate the user's ownership of the phone number and complete the verification process.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPhoneNumberOTCRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "SMS"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/{id}": {
      "delete": {
        "operationId": "UserPhoneNumbersControllerV1_deleteUserPhoneNumber",
        "summary": "Delete user's phone number",
        "description": "Initiate the deletion process for a user's phone number.\n\nThis endpoint begins the phone number removal workflow by sending a verification code to the user. The phone number will not be deleted until the verification step is completed.\n\nPath parameters:\n- `id`: The unique identifier of the phone number to be deleted.\n\nUse this endpoint to trigger the secure deletion process for a user's phone number. A follow-up verification step is required to finalize the removal.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPhoneNumberDeleteCodeResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "SMS"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/{id}/delete/verify": {
      "post": {
        "operationId": "UserPhoneNumbersControllerV1_verifyDeleteUserPhoneNumber",
        "summary": "Verify delete user's phone number",
        "description": "Verify the deletion of a user's phone number using a one-time code (OTC).\n\nThis is the final step in the phone number deletion process. After initiating deletion, the system sends a verification code to the user's phone. This endpoint confirms the deletion by validating the OTC and code.\n\nPath parameters:\n- `id`: The unique identifier of the phone number to delete.\n\nRequest body must include:\n- `otcToken`: The token issued during the deletion request.\n- `code`: The one-time code sent to the user via SMS.\n\nUse this endpoint to securely complete the deletion of a user's phone number.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPhoneNumberOTCRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "SMS"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/me": {
      "get": {
        "operationId": "UserPhoneNumbersControllerV1_getUserOwnPhoneNumbers",
        "summary": "Get current user's phone numbers",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPhoneNumberResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "SMS"
        ],
        "description": "Retrieve all phone numbers associated with the current user.\n\nThis endpoint returns a list of phone numbers linked to the authenticated user, including verification status and timestamps.\n\nThe response includes metadata such as verification status and timestamps for creation and last update.\n\nUse this endpoint to display or manage the user's registered phone numbers in your application."
      }
    },
    "/resources/configurations/v1/sms": {
      "post": {
        "operationId": "VendorSmsController_createSmsVendorConfig",
        "summary": "Creates or updates a vendor SMS config",
        "description": "Create or update the SMS configuration for your environment.\n\nProvide the desired SMS configuration values in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmsVendorConfigRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsVendorConfigResponse"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsVendorConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "SMS configuration"
        ]
      },
      "delete": {
        "operationId": "VendorSmsController_deleteSmsVendorConfig",
        "summary": "Deletes a vendor SMS config",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "SMS configuration"
        ],
        "description": "Delete the SMS configuration for your environment."
      },
      "get": {
        "operationId": "VendorSmsController_getSmsVendorConfig",
        "summary": "Gets a vendor SMS config",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsVendorConfigResponse"
                }
              }
            }
          }
        },
        "tags": [
          "SMS configuration"
        ],
        "description": "Retrieve the SMS configuration for your environment."
      }
    },
    "/resources/configurations/v1/sms/templates": {
      "get": {
        "operationId": "VendorSmsController_getAllSmsTemplates",
        "summary": "Gets vendor SMS templates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "SMS templates"
        ],
        "description": "Retrieve the SMS templates configured for your environment."
      }
    },
    "/resources/configurations/v1/sms/templates/{type}": {
      "get": {
        "operationId": "VendorSmsController_getSmsTemplate",
        "summary": "Gets vendor SMS template by type",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "SMS templates"
        ],
        "description": "Retrieve an SMS template by type.\n\nProvide the `type` as a path parameter to specify which SMS template to retrieve."
      },
      "delete": {
        "operationId": "VendorSmsController_deleteSmsTemplate",
        "summary": "Deletes vendor SMS template by type",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "SMS templates"
        ],
        "description": "Delete an SMS template by type.\n\nProvide the `type` as a path parameter to specify which SMS template to delete."
      },
      "post": {
        "operationId": "VendorSmsController_createSmsTemplate",
        "summary": "Create or update a vendor SMS template",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmsTemplateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTemplateResponse"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "SMS templates"
        ],
        "description": "Create or update an SMS template by type.\n\nProvide the `type` as a path parameter and include the SMS template details in the request body."
      }
    },
    "/resources/configurations/v1/sms/templates/{type}/default": {
      "get": {
        "operationId": "VendorSmsController_getSmsDefaultTemplate",
        "summary": "Gets vendor default SMS template by type",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmsTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "SMS templates"
        ],
        "description": "Retrieve the default SMS template by type.\n\nProvide the `type` as a path parameter to specify which default SMS template to retrieve."
      }
    },
    "/resources/configurations/sessions/v1/vendor": {
      "get": {
        "operationId": "SessionConfigurationControllerV1_getVendorSessionConfiguration",
        "summary": "Get environment session configuration",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Sessions configuration"
        ],
        "description": "Retrieve the session configuration for your environment."
      }
    },
    "/resources/configurations/sessions/v1": {
      "get": {
        "operationId": "SessionConfigurationControllerV1_getSessionConfiguration",
        "summary": "Get account (tenant) or vendor default session configuration",
        "description": "Retrieve the session configuration for the entire environment or for a specific account (tenant).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Sessions management"
        ]
      },
      "post": {
        "operationId": "SessionConfigurationControllerV1_createSessionConfiguration",
        "summary": "Create or update account (tenant) or vendor default session configuration",
        "description": "Create or update the session configuration for the entire environment or for a specific account (tenant).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionConfigurationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Sessions management"
        ]
      }
    },
    "/resources/configurations/v1/user-emails-policy": {
      "get": {
        "operationId": "UserEmailsPolicyControllerV1_getUserEmailsPolicy",
        "summary": "Get user emails policy",
        "description": "Get information about the user emails policy. An environment token is required for this route.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEmailsPolicyResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User emails policy"
        ]
      },
      "post": {
        "operationId": "UserEmailsPolicyControllerV1_createOrUpdateUserEmailsPolicy",
        "summary": "Create or update user emails policy",
        "description": "Enable or disable the ability to change user emails. An environment token is required for this route.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserEmailsPolicyRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User emails policy"
        ]
      }
    },
    "/resources/groups/v1": {
      "get": {
        "operationId": "GroupsControllerV1_getAllGroups",
        "summary": "Get all groups",
        "description": "Retrieve all user groups for an account (tenant).",
        "parameters": [
          {
            "name": "_groupsRelations",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "roles",
                "users",
                "rolesAndUsers"
              ],
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      },
      "post": {
        "operationId": "GroupsControllerV1_createGroup",
        "summary": "Create group",
        "description": "Create a user group for an account (tenant).\n\nProvide the group details in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/groups/v1/bulkGet": {
      "post": {
        "operationId": "GroupsControllerV1_getGroupsByIds",
        "summary": "Get groups by Ids",
        "description": "Retrieve user groups by given IDs for an account (tenant).\n\nProvide the group IDs in the request body.",
        "parameters": [
          {
            "name": "_groupsRelations",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "roles",
                "users",
                "rolesAndUsers"
              ],
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetGroupsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/groups/v1/{id}": {
      "patch": {
        "operationId": "GroupsControllerV1_updateGroup",
        "summary": "Update group",
        "description": "Update a user group by ID for an account (tenant).\n\nProvide the group ID as a path parameter and the updated group details in the request body.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      },
      "delete": {
        "operationId": "GroupsControllerV1_deleteGroup",
        "summary": "Delete group",
        "description": "Delete a user group by ID for an account (tenant).\n\nProvide the group ID as a path parameter.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User groups"
        ]
      },
      "get": {
        "operationId": "GroupsControllerV1_getGroupById",
        "summary": "Get group by ID",
        "description": "Retrieve a user group by ID for an account (tenant).\n\nProvide the group ID as a path parameter.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_groupsRelations",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "roles",
                "users",
                "rolesAndUsers"
              ],
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/groups/v1/config": {
      "get": {
        "operationId": "GroupsControllerV1_getGroupsConfiguration",
        "summary": "Get groups configuration",
        "description": "Retrieve the user group configuration for your environment.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGroupConfigurationResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      },
      "post": {
        "operationId": "GroupsControllerV1_createOrUpdateGroupsConfiguration",
        "summary": "Create or update groups configuration",
        "description": "Create or update the user group configuration for your environment.\n\nProvide the configuration details in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateGroupConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/groups/v1/{groupId}/roles": {
      "post": {
        "operationId": "GroupsControllerV1_addRolesToGroup",
        "summary": "Add roles to group",
        "description": "Add roles to an existing user group.\n\nA user can assign only roles that are lower than their own.",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolesOnGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User groups"
        ]
      },
      "delete": {
        "operationId": "GroupsControllerV1_removeRolesFromGroup",
        "summary": "Remove roles from group",
        "description": "Remove roles from an existing user group.\n\nProvide the roles to remove in the request body.",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolesOnGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/groups/v1/{groupId}/users": {
      "post": {
        "operationId": "GroupsControllerV1_addUsersToGroup",
        "summary": "Add users to group",
        "description": "Add users to an existing user group.\n\nOnly users with higher roles than the group's roles are allowed to perform this action.",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUsersOnGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User groups"
        ]
      },
      "delete": {
        "operationId": "GroupsControllerV1_removeUsersFromGroup",
        "summary": "Remove users from group",
        "description": "Remove users from an existing user group.\n\nProvide the users to remove in the request body.",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUsersOnGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/groups/v2": {
      "get": {
        "operationId": "GroupsControllerV2_getAllGroupsPaginated",
        "summary": "Get all groups paginated",
        "description": "Retrieve all user groups for an account (tenant), with pagination.\n\nUse query parameters to control pagination and optionally include related group data.",
        "parameters": [
          {
            "name": "_groupsRelations",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "roles",
                "users",
                "rolesAndUsers"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "id",
                "name",
                "createdAt",
                "updatedAt"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GroupResponse"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "User groups"
        ]
      }
    },
    "/resources/tenants/users/v1/{userId}/disable": {
      "post": {
        "operationId": "UsersTenantsControllerV1_disableUserTenant",
        "summary": "Disable user account (tenant)",
        "description": "Disable a user for an account (tenant).\n\nA disabled user cannot log in to the account (tenant) or use the system.\n\nProvide the user's ID as a path parameter.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "201": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/tenants/users/v1/{userId}/enable": {
      "post": {
        "operationId": "UsersTenantsControllerV1_enableUserTenant",
        "summary": "Enable user account (tenant)",
        "description": "Enable a disabled user for an account (tenant).\n\nAn enabled user can log in and use the system.\n\nProvide the user's ID as a path parameter.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "201": {
            "description": ""
          },
          "403": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/temporary/v1/{userId}": {
      "put": {
        "operationId": "TemporaryUsersV1Controller_editTimeLimit",
        "summary": "Sets a permanent user to temporary",
        "description": "Update the settings for temporary users.\n\nUse this route to enable or disable temporary users for your environment",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      },
      "delete": {
        "operationId": "TemporaryUsersV1Controller_setUserPermanent",
        "summary": "Sets a temporary user to permanent",
        "description": "Set an existing temporary user as permanent.\n\nProvide the user's ID as a path parameter.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/temporary/v1/configuration": {
      "get": {
        "operationId": "TemporaryUsersV1Controller_getConfiguration",
        "summary": "Gets temporary users configuration",
        "description": "Retrieve the settings for temporary users.\n\nUse this endpoint to check whether the policy is enabled or disabled.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryUsersConfigurationDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      },
      "put": {
        "operationId": "TemporaryUsersV1Controller_updateConfiguration",
        "summary": "Set temporary users configuration",
        "description": "This route updates the settings for temporary users, use it to enable or disable it for an environment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryUsersConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryUsersConfigurationDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/sub-tenants/users/v1/{userId}/access": {
      "put": {
        "operationId": "UsersControllerV1_setUserRolesFromSubTenants",
        "summary": "Set sub-account access for a user",
        "description": "Set sub-account access for a user.\n\nUse this endpoint to enable or disable sub-account access by setting the value to `true` or `false`.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubAccountAccessRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/activate/reset": {
      "post": {
        "operationId": "UsersActivationControllerV1_resetActivationToken",
        "summary": "Reset user activation token",
        "description": "Reset the activation token for a user and trigger a new activation email.\n\nProvide the user's ID as a path parameter.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetActivationTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/invitation/reset": {
      "post": {
        "operationId": "UsersTenantManagementControllerV1_resetTenantInvitationToken",
        "summary": "Reset invitation",
        "description": "Reset an invitation for a user to join a specific account (tenant).\n\nThe response includes a new invitation link with a new token.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetTenantInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/invitation/reset/all": {
      "post": {
        "operationId": "UsersTenantManagementControllerV1_resetAllTenantsInvitationToken",
        "summary": "Reset all invitation tokens",
        "description": "Reset all invitations for a user to join all sub-accounts (tenants) that currently have an invitation token.\n\nThe response includes new invitation links with new tokens.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetTenantInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v3": {
      "get": {
        "operationId": "UsersControllerV3_getUsers",
        "summary": "Get users",
        "description": "Retrieve all users for an account (tenant) or for the entire environment.",
        "parameters": [
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "The default limit is 50 users per request, the maximum is 200",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_identifier",
            "required": false,
            "in": "query",
            "description": "Filter users by username prefix match. Must be provided together with _identifierType",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_identifierType",
            "required": false,
            "in": "query",
            "description": "Filter users by username. Must be provided together with _identifier",
            "schema": {
              "enum": [
                "email",
                "phoneNumber",
                "username"
              ],
              "type": "string"
            }
          },
          {
            "name": "_includeSubTenants",
            "required": false,
            "in": "query",
            "description": "when passing a user id, gives the option to include or not include sub accounts (tenants) when searching users",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_tenantId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "createdAt",
                "name",
                "email",
                "id",
                "verified",
                "isLocked",
                "provider",
                "tenantId"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserV3Dto"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v3/roles": {
      "get": {
        "operationId": "UsersControllerV3_getUsersRoles",
        "summary": "Get users roles",
        "description": "Retrieve all user roles for an account (tenant).",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserRolesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v3/groups": {
      "get": {
        "operationId": "UsersControllerV3_getUsersGroups",
        "summary": "Get users groups",
        "description": "Retrieve all user groups for an account (tenant).",
        "parameters": [
          {
            "name": "ids",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserGroupsResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v3/me/unlock": {
      "post": {
        "operationId": "UsersControllerV3_unlock",
        "summary": "Unlock user",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockUserRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ],
        "description": "Unlock your user account.\n\nProvide the required information in the request body to unlock the account."
      }
    },
    "/resources/users/v2": {
      "post": {
        "operationId": "UsersControllerV2_createUser",
        "summary": "Invite user",
        "description": "Create a user for a specific account (tenant).\n\nInclude the user's information in the request body. The `email` and `metadata` fields are required. The `metadata` field can be empty (e.g., `{}`).",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreatedResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v2/me": {
      "put": {
        "operationId": "UsersControllerV2_updateUserProfile",
        "summary": "Update user profile",
        "description": "Update the profile of a logged-in user.\n\nProvide the updated values in the request body.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      },
      "get": {
        "operationId": "UsersControllerV2_getUserProfile",
        "summary": "Get user profile",
        "description": "Retrieve the profile of a logged-in user.\n\nNo parameters are required.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1": {
      "post": {
        "operationId": "UsersControllerV1_createUser",
        "summary": "Create user",
        "description": "Use the V2 route for Invite User. This route is no longer relevant.",
        "deprecated": true,
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreatedResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      },
      "put": {
        "operationId": "UsersControllerV1_updateUser",
        "summary": "Update user",
        "description": "TUpdate a user's information for a specific account (tenant).\n\nInclude the updated user information in the request body.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/{userId}": {
      "delete": {
        "operationId": "UsersControllerV1_removeUserFromTenant",
        "summary": "Remove user",
        "description": "Remove a user globally or from a specific account (tenant).\n\nAn environment token is required for this route and can be obtained from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier (optional)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      },
      "put": {
        "operationId": "UsersControllerV1_updateUserForVendor",
        "summary": "Update user globally",
        "description": "Update a user's information globally.\n\nProvide the user's ID as a path parameter and include the updated user values in the request body. The PUT request performs a complete update of the resource â€” include values for all body parameters you want to set.\n\nThis is a global update, so do not send a `frontegg-tenant-id` header.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVendorUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/roles": {
      "post": {
        "operationId": "UsersControllerV1_addRolesToUser",
        "summary": "Assign roles to user",
        "description": "Associate roles to a specific user for a specific account (tenant).",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToRolesDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignUserToRolesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      },
      "delete": {
        "operationId": "UsersControllerV1_deleteRolesFromUser",
        "summary": "Unassign roles from user",
        "description": "Disassociate roles from a specific user for a specific account (tenant).\n\nInclude the role IDs in the request body as an array of strings.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignUserFromRolesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserToRolesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/tenant": {
      "put": {
        "operationId": "UsersControllerV1_updateUserTenant",
        "summary": "Update user's active account (tenant)",
        "description": "Update the current account (tenant) for a logged-in user.\n\nUse this endpoint when a user belongs to multiple accounts (tenants) and wants to change the active account (tenant).\n\nInclude the target account (tenant) ID in the request body.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTenantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/query/phrase": {
      "get": {
        "operationId": "UsersControllerV1_searchUsers",
        "summary": "Get users with fuzzy search",
        "description": "Retrieve all users for a specific account (tenant) or for the entire environment.\n\nIn addition to all standard Get users query parameters, this route supports phrase search, enabling complex queries with options such as `contains`, `excludes`, `optional`, and approximate matching.",
        "parameters": [
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "description": "The default limit is 50 users per request, the maximum is 200",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "_identifier",
            "required": false,
            "in": "query",
            "description": "Filter users by username prefix match. Must be provided together with _identifierType",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_identifierType",
            "required": false,
            "in": "query",
            "description": "Filter users by username. Must be provided together with _identifier",
            "schema": {
              "enum": [
                "email",
                "phoneNumber",
                "username"
              ],
              "type": "string"
            }
          },
          {
            "name": "_includeSubTenants",
            "required": false,
            "in": "query",
            "description": "when passing a user id, gives the option to include or not include sub accounts (tenants) when searching users",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "_phraseSearchContains",
            "required": false,
            "in": "query",
            "description": "Pass a list of strings, separated by comma, to search for users that contain all of the strings in the list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "_phraseSearchExcludes",
            "required": false,
            "in": "query",
            "description": "Pass a list of strings, separated by comma, to search for users that do not contain any of the strings in the list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "_phraseSearchOptional",
            "required": false,
            "in": "query",
            "description": "Pass a list of strings, separated by comma, to search for users that contain at least one of the strings in the list",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "_phraseSearchApproximate",
            "required": false,
            "in": "query",
            "description": "When true, the search will be approximate (fuzzy), meaning it will include similar characters to the ones in the search string",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_email",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_tenantId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "ids",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "createdAt",
                "name",
                "email",
                "id",
                "verified",
                "isLocked",
                "provider",
                "tenantId"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UserV3Dto"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/usernames/v1": {
      "get": {
        "operationId": "UsernamesControllerV1_getUsersUsernames",
        "summary": "Get usernames for users",
        "description": "This route gets usernames for users.",
        "parameters": [
          {
            "name": "_limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_offset",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 0,
              "type": "number"
            },
            "description": ""
          },
          {
            "name": "_sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "userId",
                "username"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "_order",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "userIds",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": ""
          },
          {
            "name": "usernames",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsernameResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      },
      "post": {
        "operationId": "UsernamesControllerV1_createUsername",
        "summary": "Create a username for user",
        "description": "This route creates a username for a user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUsernameRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/usernames/v1/{username}": {
      "delete": {
        "operationId": "UsernamesControllerV1_deleteUsername",
        "summary": "Delete a username for user",
        "description": "This route deletes a username for a user.",
        "parameters": [
          {
            "name": "username",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/usernames/v1/me": {
      "get": {
        "operationId": "UsernamesControllerV1_getMeUsernames",
        "summary": "Get authenticated user's username",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsernameResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ],
        "description": ""
      }
    },
    "/resources/users/v1/email/me": {
      "post": {
        "operationId": "SelfEmailUpdateControllerV1_updateEmailMe",
        "summary": "Update user email",
        "description": "This route updates the email for a user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfEmailUpdateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/email/me/verify": {
      "post": {
        "operationId": "SelfEmailUpdateControllerV1_verifyEmailMe",
        "summary": "Verify user email",
        "description": "This route verifies the email for a user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SelfEmailUpdateVerifyRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/activate": {
      "post": {
        "operationId": "UsersActivationControllerV1_activateUser",
        "summary": "Activate user",
        "description": "Activate a non-activated user.\n\nInclude the `userId` and `activationToken` in the request body. If required by your environment's sign-in flow, also include the user's password and reCAPTCHA values.\n\nYou can generate an activation token using the route under Users â†’ Generate Activation Token.\n\nAlternatively, you can use the built-in email template for user activation.",
        "parameters": [
          {
            "name": "frontegg-vendor-host",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/activate/code": {
      "post": {
        "operationId": "UsersActivationControllerV1_activateUserWithCode",
        "summary": "Activate user with code",
        "description": "Activate a non-activated user.\n\nUse this endpoint to implement a custom activation flow.\n\nInclude the `userId`, `activationToken`, and `code` in the request body. If required by your environment's sign-in flow, also include the user's password and reCAPTCHA values.\n\nYou can generate an activation token using the route under Users â†’ Generate Activation Token.\n\nAlternatively, you can use the built-in email template for user activation.",
        "parameters": [
          {
            "name": "frontegg-vendor-host",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateUserWithCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/activate/strategy": {
      "get": {
        "operationId": "UsersActivationControllerV1_getActivationStrategy",
        "summary": "Get user activation strategy",
        "description": "Retrieve a user's activation strategy.\n\nThe activation strategy indicates whether the user needs to set a password.\n\nInclude the `userId` and `activationToken` in the request body. You can generate an activation token using the route under Users â†’ Generate Activation Token.\n\nThe response returns a Boolean field `shouldSetPassword`. If `true`, the user needs to set a password. If `false`, the user does not need to set a password (for example, SSO users do not set passwords).",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivateStrategyResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/invitation/accept": {
      "post": {
        "operationId": "UsersTenantManagementControllerV1_acceptInvitation",
        "summary": "Accept invitation",
        "description": "Accept an invitation for a user to join a specific account (tenant).\n\nInclude the `userId` and `invitationToken` in the request body. These values appear as query parameters in the URL that Frontegg sends to the user in the activation email.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          },
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/invitation/accept/code": {
      "post": {
        "operationId": "UsersTenantManagementControllerV1_acceptInvitationWithCode",
        "summary": "Accept invitation with code",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitationWithCodeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User management"
        ],
        "description": "Accept an invitation to join a specific account (tenant) using an invitation code.\n\nInclude the required `userId`, `invitationToken`, and `code` in the request body."
      }
    },
    "/resources/users/v3/me": {
      "get": {
        "operationId": "UsersControllerV3_getUserProfile",
        "summary": "Get user profile",
        "description": "Retrieve the profile of a logged-in user.\n\nNo parameters are required.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserV3Dto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v2/me/tenants": {
      "get": {
        "operationId": "UsersControllerV2_getUserTenants",
        "summary": "Get user accounts (tenants)",
        "description": "Retrieve the list of accounts (tenants) that a logged-in user belongs to.\n\nNo parameters are required.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTenantDataDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v2/me/hierarchy": {
      "get": {
        "operationId": "UsersControllerV2_getUserTenantsHierarchy",
        "summary": "Get user accounts (tenants) hierarchy",
        "description": "Retrieve the list of accounts (tenants) with hierarchy metadata that a logged-in user belongs to.\n\nIf the user is a member of multiple accounts (tenants) in a hierarchy, some entries may be reduced based on the hierarchy structure.\n\nNo parameters are required.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserTenantsHierarchyResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/me/authorization": {
      "get": {
        "operationId": "UsersControllerV1_getMeAuthorization",
        "summary": "Get user permissions and roles",
        "description": "Retrieve the list of permissions and roles that a logged-in user has.\n\nNo parameters are required.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeAuthorizationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/users/v1/me/tenants": {
      "get": {
        "operationId": "UsersControllerV1_getUserTenants",
        "summary": "Get user accounts (tenants)",
        "description": "Retrieve the list of accounts (tenants) that a logged-in user belongs to.\n\nNo parameters are required.\n\nUse your Frontegg subdomain or custom domain as the host. A user token is required for this route and can be obtained after user authentication.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserTenantsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "User management"
        ]
      }
    },
    "/resources/user-sources/v1": {
      "get": {
        "operationId": "UserSourcesControllerV1_getUserSources",
        "summary": "Get vendor user sources",
        "description": "Retrieve all user sources configured for your environment.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetUserSourceExtendedResponseDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/{id}": {
      "get": {
        "operationId": "UserSourcesControllerV1_getUserSource",
        "summary": "Get vendor user source",
        "description": "Retrieve a user source by ID.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserSourceResponseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      },
      "delete": {
        "operationId": "UserSourcesControllerV1_deleteUserSource",
        "summary": "Delete user source",
        "description": "Delete a user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/auth0": {
      "post": {
        "operationId": "UserSourcesControllerV1_createAuth0ExternalUserSource",
        "summary": "Create Auth0 external user source",
        "description": "Create a new external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuth0ExternalUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserSourceResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/cognito": {
      "post": {
        "operationId": "UserSourcesControllerV1_createCognitoExternalUserSource",
        "summary": "Create Cognito external user source",
        "description": "Create a new external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCognitoExternalUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserSourceResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/firebase": {
      "post": {
        "operationId": "UserSourcesControllerV1_createFirebaseExternalUserSource",
        "summary": "Create Firebase external user source",
        "description": "Create a new external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFirebaseExternalUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserSourceResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/custom-code": {
      "post": {
        "operationId": "UserSourcesControllerV1_createCustomCodeExternalUserSource",
        "summary": "Create Custom-Code external user source",
        "description": "Create a new external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomCodeExternalUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserSourceResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/federation": {
      "post": {
        "operationId": "UserSourcesControllerV1_createFederationUserSource",
        "summary": "Create Federation user source",
        "description": "Create a new federation user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFederationUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserSourceResponse"
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/auth0/{id}": {
      "put": {
        "operationId": "UserSourcesControllerV1_updateAuth0ExternalUserSource",
        "summary": "Update Auth0 external user source",
        "description": "Update an external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalAuth0UserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/cognito/{id}": {
      "put": {
        "operationId": "UserSourcesControllerV1_updateCognitoExternalUserSource",
        "summary": "Update Cognito external user source",
        "description": "Update an external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalCognitoUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/firebase/{id}": {
      "put": {
        "operationId": "UserSourcesControllerV1_updateFirebaseExternalUserSource",
        "summary": "Update Firebase external user source",
        "description": "Update an external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalFirebaseUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/external/custom-code/{id}": {
      "put": {
        "operationId": "UserSourcesControllerV1_updateCustomCodeExternalUserSource",
        "summary": "Update Custom-Code external user source",
        "description": "Update an external user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalCustomCodeUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/federation/{id}": {
      "put": {
        "operationId": "UserSourcesControllerV1_updateFederationUserSource",
        "summary": "Update Federation user source",
        "description": "Update a federation user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFederationUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/assign": {
      "post": {
        "operationId": "UserSourcesControllerV1_assignUserSource",
        "summary": "Assign applications to a user source",
        "description": "Assign applications to a user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignApplicationsToUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/unassign": {
      "post": {
        "operationId": "UserSourcesControllerV1_unassignUserSource",
        "summary": "Unassign applications from a user source",
        "description": "Unassign applications from a user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignApplicationsFromUserSourceRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/user-sources/v1/{id}/users": {
      "get": {
        "operationId": "UserSourcesControllerV1_getUserSourceUsers",
        "summary": "Get user source users",
        "description": "Retrieve all users of a user source.\n\nA valid environment token is required to call this endpoint.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/FronteggPaginationWrapper"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/GetUserSourceUsersResponseDTO"
                          }
                        },
                        "_links": {
                          "$ref": "#/components/schemas/FronteggPaginationLinks"
                        },
                        "_metadata": {
                          "$ref": "#/components/schemas/FronteggPaginationMetadata"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "User pools"
        ]
      }
    },
    "/resources/users/sessions/v1/me": {
      "get": {
        "operationId": "UserSessionsControllerV1_getActiveSessions",
        "summary": "Get user's active sessions",
        "description": "Retrieve all active sessions for a user.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User sessions"
        ]
      }
    },
    "/resources/users/sessions/v1/me/all": {
      "delete": {
        "operationId": "UserSessionsControllerV1_deleteAllUserActiveSessions",
        "summary": "Delete all user sessions",
        "description": "Delete all active sessions for a user.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User sessions"
        ]
      }
    },
    "/resources/users/sessions/v1/me/{id}": {
      "delete": {
        "operationId": "UserSessionsControllerV1_deleteUserSession",
        "summary": "Delete single user's session",
        "description": "Delete a specific active session for a user.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "User sessions"
        ]
      }
    },
    "/resources/vendor-only/users/v1/{userId}": {
      "get": {
        "operationId": "VendorOnlyUsers_getUserById",
        "summary": "Get user",
        "description": "Retrieve a user by ID, regardless of account (tenant).\n\nProvide the user's ID as a path parameter.\n\nThis route is for vendor use only.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/vendor-only/users/v1/{userId}/mfa/unenroll": {
      "post": {
        "operationId": "VendorOnlyUsers_MFAUnenroll",
        "summary": "Unenroll user from MFA globally",
        "description": "Unenroll a user from MFA, regardless of account (tenant).\n\nProvide the user's ID as a path parameter.\n\nThis route is for vendor use only.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/vendor-only/users/v1/passwords/verify": {
      "post": {
        "operationId": "VendorOnlyUsers_verifyUserPassword",
        "summary": "Verify user's password",
        "description": "Verify a user's email and password.\n\nProvide the user's email and password in the request body. The response will indicate `true` or `false`.\n\nThis route is for vendor use only.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateUserPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateUserPasswordResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/vendor-only/users/v1": {
      "post": {
        "operationId": "VendorOnlyUsers_createUser",
        "summary": "Create user",
        "description": "Create a user and set the `mfaBypass` property for testing purposes.\n\nThis route is for vendor use only.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDtoVendorOnly"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/tenants/users/v1/statuses": {
      "get": {
        "operationId": "get",
        "summary": "Get users account (tenant) statuses",
        "description": "Retrieve the account (tenant) statuses of vendor users.\n\nProvide an array of `userIds` (maximum 200) and optionally an array of `userTenantStatuses` as query parameters. There is a limit of 2000 account (tenant) statuses per user.",
        "parameters": [
          {
            "name": "userIds",
            "required": true,
            "in": "query",
            "description": "User IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "userTenantStatuses",
            "required": false,
            "in": "query",
            "description": "Account (tenant) Statuses",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PendingInvitation",
                  "PendingLogin",
                  "Activated",
                  "NotActivated"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTenantStatusesResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/vendor/{userId}": {
      "post": {
        "operationId": "UserPhoneNumbersControllerV1_createUserPhoneNumberVendor",
        "summary": "Create user phone number verified by default",
        "description": "Create a new user phone number.\n\nPhone numbers added by the vendor will be automatically verified.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreVerifyUserPhoneNumberRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/phone-numbers/v1/vendor/{userId}/{phoneId}": {
      "delete": {
        "operationId": "UserPhoneNumbersControllerV1_deleteUserPhoneNumberVendor",
        "summary": "Delete user phone number on an environment",
        "description": "Delete a user phone number without verification.",
        "parameters": [
          {
            "name": "phoneId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/bulk/v1/invite": {
      "post": {
        "operationId": "UsersBulkControllerV1_bulkInviteUsers",
        "summary": "Invite users to an account (tenant) in bulk",
        "description": "Invite users to an account (tenant) in bulk.\n\nProvide an array of `users` in the request body. Each entry must include a user's `email`.",
        "parameters": [
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsersBulkInviteRequestDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskContext"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/bulk/v1/status/{id}": {
      "get": {
        "operationId": "UsersBulkControllerV1_getBulkInviteStatus",
        "summary": "Get status of bulk invite task",
        "description": "Invite users to an account (tenant) in bulk.\n\nProvide an array of `users` in the request body. Each entry must include a user's `email`.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/email": {
      "get": {
        "operationId": "UsersControllerV1_getUserByEmail",
        "summary": "Get user by email",
        "description": "Retrieve a user by email.\n\nProvide the user's `email` as a query parameter.",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoreUserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{id}": {
      "get": {
        "operationId": "UsersControllerV1_getUserById",
        "summary": "Get user by ID",
        "description": "Retrieve a specific user from an account (tenant).\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "frontegg-tenant-id",
            "in": "header",
            "description": "The account (tenant) ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/verify": {
      "post": {
        "operationId": "UsersControllerV1_verifyUser",
        "summary": "Verify user",
        "description": "Mark a user as verified.\n\nProvide the user's ID as a path parameter.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/invisible": {
      "put": {
        "operationId": "UsersControllerV1_setUserInvisibleMode",
        "summary": "Make user invisible",
        "description": "Set whether a user is invisible or visible.\n\nAn invisible user remains part of the account (tenant) but will not appear in the list of users in the admin box. The user data remains in the system.\n\nProvide the user's ID as a path parameter and a Boolean `invisible` value in the request body (`true` for invisible, `false` for visible).\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserInvisibleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/superuser": {
      "put": {
        "operationId": "UsersControllerV1_setUserSuperuserMode",
        "summary": "Make user super-user",
        "description": "Set a user as a super-user.\n\nSuper-user functionality is no longer maintained due to incompatibility with newer features. A super-user has access to all accounts (tenants) within the workspace.\n\nProvide the user's ID as a path parameter and a Boolean `superUser` value in the request body (`true` for super-user, `false` for regular user).\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserSuperuserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/tenant": {
      "put": {
        "operationId": "UsersControllerV1_updateUserTenantForVendor",
        "summary": "Set user's account (tenant)",
        "description": "Set the active account (tenant) of a user.\n\nThe active account (tenant) is the account (tenant) the user will see in their admin portal and the account (tenant) used by default for account (tenant)-specific API routes.\n\nProvide the user's ID as a path parameter and the account (tenant) ID as a `tenantId` value in the request body. If a non-existing account (tenant) ID is provided, an account (tenant) will be created for that ID.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTenantWithValidationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "operationId": "UsersControllerV1_addUserToTenantForVendor",
        "summary": "Add user to account (tenant)",
        "description": "Add a user to an account (tenant).\n\nProvide the user's ID as a path parameter and the account (tenant) ID as a `tenantId` value in the request body. To skip sending an invite email, include the optional `skipInviteEmail` parameter in the request body and set it to `true`.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserToTenantRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/email": {
      "put": {
        "operationId": "UsersControllerV1_updateUserEmail",
        "summary": "Update user email",
        "description": "Update a user's email address globally, regardless of account (tenant).\n\nProvide the user's ID as a path parameter and the new email address as an `email` value in the request body.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/links/generate-activation-token": {
      "post": {
        "operationId": "UsersControllerV1_generateUserActivationLink",
        "summary": "Generate activation token",
        "description": "Generate a new activation token for a user.\n\nProvide the user's ID as a path parameter. This route does not send the activation email but returns the activation link and token. It can be used in combination with the routes under **Users Activation**.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateUserActivationLinkResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/links/generate-password-reset-token": {
      "post": {
        "operationId": "UsersControllerV1_generateUserPasswordResetLink",
        "summary": "Generate password reset token",
        "description": "Generate a password reset token for a user.\n\nProvide the user's ID as a path parameter. This route does not send the reset password email but returns the reset link and token. It can be used in combination with the routes under **Users Passwords**.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateUserResetPasswordLinkResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/unlock": {
      "post": {
        "operationId": "UsersControllerV1_unlockUser",
        "summary": "Unlock user",
        "description": "Unlock a locked user.\n\nAn unlocked user can sign in and use the system globally, regardless of account (tenant). Provide the user's ID as a path parameter.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/{userId}/lock": {
      "post": {
        "operationId": "UsersControllerV1_lockUser",
        "summary": "Lock user",
        "description": "Lock a user.\n\nA locked user cannot sign in or use the system globally, regardless of account (tenant). Provide the user's ID as a path parameter.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/users/v1/tenants/migrate": {
      "put": {
        "operationId": "UsersControllerV1_moveAllUsersTenants",
        "summary": "Move all users from one account (tenant) to another",
        "description": "Migrate all users from a source account (tenant) to a target account (tenant).\n\nSpecify `srcTenantId` (source account (tenant) ID) and `targetTenantId` (target account (tenant) ID) in the request body.\n\nA valid environment token is required to call this endpoint. You can obtain it from the environment authentication route.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateUsersFromTenantToTenantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/resources/applications/v1/{appId}/users": {
      "get": {
        "operationId": "ApplicationsControllerV1_getUsersForApplication",
        "summary": "Get users for application",
        "description": "Retrieve users for an application.\n\nProvide the application ID as a path parameter.",
        "parameters": [
          {
            "name": "appId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users-applications management"
        ]
      }
    },
    "/resources/applications/v1/{userId}/apps": {
      "get": {
        "operationId": "ApplicationsControllerV1_getApplicationsForUser",
        "summary": "Get applications for user",
        "description": "Retrieve applications for a user.\n\nProvide the user's ID as a path parameter",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            },
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users-applications management"
        ]
      }
    },
    "/resources/applications/v1": {
      "post": {
        "operationId": "ApplicationsControllerV1_assignUsersToApplication",
        "summary": "Assign users to application",
        "description": "Assign users to an application.\n\nProvide the application ID as a path parameter and the user IDs in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUsersToAppRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationUserTenantsResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Users-applications management"
        ]
      },
      "delete": {
        "operationId": "ApplicationsControllerV1_unassignUsersFromApplication",
        "summary": "Unassign users from application",
        "description": "Unassign users from an application.\n\nProvide the application ID as a path parameter and the user IDs in the request body.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignUsersFromAppRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users-applications management"
        ]
      }
    },
    "/resources/applications/user-tenants/active/v1": {
      "get": {
        "operationId": "ApplicationsActiveUserTenantsControllerV1_getUserApplicationActiveTenants",
        "summary": "Get user active accounts (tenants) in applications",
        "description": "Retrieve the active accounts (tenants) of a user for an application.\n\nProvide the application ID and the user ID as path parameters.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApplicationActiveTenantsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Users-applications management"
        ]
      },
      "put": {
        "operationId": "ApplicationsActiveUserTenantsControllerV1_switchUserApplicationActiveTenant",
        "summary": "Switch users active account (tenant) in applications",
        "description": "Update the active accounts (tenants) of a user for an application.\n\nProvide the application ID and the user ID as path parameters and the updated list of account (tenant) IDs in the request body.",
        "parameters": [
          {
            "name": "frontegg-user-id",
            "in": "header",
            "description": "The user ID identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SwitchApplicationActiveUserTenantsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Users-applications management"
        ]
      }
    }
  },
  "info": {
    "title": "Authentication and Identity Management",
    "description": "Frontegg offers a comprehensive suite of authentication, user management, and security features to streamline identity management and enhance application security. This section provides an overview of all relevant API endpoints, organized into Authentication, Management, and Self-Service categories.\n\n**Authentication Endpoints**: Enable secure user login, multi-factor authentication (MFA), passwordless options, and social login integrations, allowing for a flexible and robust sign-in experience.\n\n**Management Endpoints**: Require environment-level authorization and provide full control over SSO (SAML and OpenID Connect) resources, user roles, permissions, and configurations. These endpoints are designed for administrative use, allowing for centralized identity and access management.\n\n**Self-Service Endpoints**: Accessible with a user token (JWT), these endpoints empower users to manage their SSO connections and other account settings. Users with the necessary permissions can create, update, or delete SSO configurations directly, ensuring they have the tools to manage their access securely and independently.\n\nEach category in this section helps you configure and extend Fronteggâ€™s capabilities, providing the flexibility to manage user identities, authentication protocols, and access controls as per your applicationâ€™s needs.",
    "version": ""
  },
  "servers": [
    {
      "url": "https://api.frontegg.com/identity",
      "description": "EU Region"
    },
    {
      "url": "https://api.us.frontegg.com/identity",
      "description": "US Region"
    },
    {
      "url": "https://api.ca.frontegg.com/identity",
      "description": "CA Region"
    },
    {
      "url": "https://api.au.frontegg.com/identity",
      "description": "AU Region"
    },
    {
      "url": "https://{domain}.frontegg.com/identity",
      "description": "Frontegg sub-domain for use with user tokens",
      "variables": {
        "domain": {
          "default": "app-xxx"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "PermissionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "categoryId": {
            "type": "string",
            "description": ""
          },
          "fePermission": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "id",
          "key",
          "name",
          "description",
          "createdAt",
          "updatedAt",
          "roleIds",
          "categoryId",
          "fePermission"
        ]
      },
      "AddPermissionRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "categoryId": {
            "type": "string",
            "description": ""
          },
          "assignmentType": {
            "type": "string",
            "enum": [
              "NEVER",
              "ALWAYS",
              "ASSIGNABLE"
            ],
            "description": ""
          }
        },
        "required": [
          "key",
          "name"
        ]
      },
      "UpdatePermissionRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "categoryId": {
            "type": "string",
            "description": ""
          }
        }
      },
      "AddRolesToPermissionRequest": {
        "type": "object",
        "properties": {
          "roleIds": {
            "description": "The permission will be assigned to the specified roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "ClassifyPermissionsDto": {
        "type": "object",
        "properties": {
          "permissionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "NEVER",
              "ALWAYS",
              "ASSIGNABLE"
            ],
            "description": ""
          }
        },
        "required": [
          "permissionIds",
          "type"
        ]
      },
      "PermissionCategoryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "feCategory": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "createdAt",
          "feCategory"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "id": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          }
        }
      },
      "CreateUserAccessTokenRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": ""
          },
          "expiresInMinutes": {
            "type": "number",
            "minimum": 1,
            "description": "Token expiration time in minutes. In case of undefined, the token won't be expired"
          }
        }
      },
      "UserAccessTokenResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "createdAt"
        ]
      },
      "GetUserAccessTokensResponse": {
        "type": "object",
        "properties": {
          "accessTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessTokenResponse"
            },
            "description": ""
          }
        },
        "required": [
          "accessTokens"
        ]
      },
      "CreateTenantAccessTokenRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": ""
          },
          "expiresInMinutes": {
            "type": "number",
            "minimum": 1,
            "description": "Token expiration time in minutes. In case of undefined, the token won't be expired"
          },
          "roleIds": {
            "description": "Array of role IDs to attach to the token",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TenantAccessTokenResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "roleIds": {
            "description": "Array of role Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true,
            "description": ""
          }
        },
        "required": [
          "id",
          "createdAt",
          "roleIds",
          "createdByUserId"
        ]
      },
      "GetTenantAccessTokensResponse": {
        "type": "object",
        "properties": {
          "accessTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantAccessTokenResponse"
            },
            "description": ""
          }
        },
        "required": [
          "accessTokens"
        ]
      },
      "AuthUserAccessTokenResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "id": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "id",
          "tenantId",
          "permissions",
          "roles"
        ]
      },
      "AuthTenantAccessTokenResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "tenantId",
          "permissions",
          "roles"
        ]
      },
      "RecoverMfaDto": {
        "type": "object",
        "properties": {
          "recoveryCode": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "recoveryCode",
          "email"
        ]
      },
      "VendorConfigRequest": {
        "type": "object",
        "properties": {
          "defaultTokenExpiration": {
            "type": "number",
            "description": ""
          },
          "defaultRefreshTokenExpiration": {
            "type": "number",
            "maximum": 15552000,
            "description": ""
          },
          "cookieSameSite": {
            "enum": [
              "STRICT",
              "LAX",
              "NONE"
            ],
            "type": "string",
            "description": ""
          },
          "machineToMachineAuthStrategy": {
            "enum": [
              "ClientCredentials",
              "AccessToken"
            ],
            "type": "string",
            "description": ""
          },
          "allowSignups": {
            "type": "boolean",
            "description": ""
          },
          "apiTokensEnabled": {
            "type": "boolean",
            "description": ""
          },
          "allowOverridePasswordComplexity": {
            "type": "boolean",
            "description": ""
          },
          "allowOverridePasswordExpiration": {
            "type": "boolean",
            "description": ""
          },
          "allowOverrideEnforcePasswordHistory": {
            "type": "boolean",
            "description": ""
          },
          "jwtAlgorithm": {
            "enum": [
              "HS256",
              "RS256"
            ],
            "type": "string",
            "description": ""
          },
          "allowNotVerifiedUsersLogin": {
            "type": "boolean",
            "description": ""
          },
          "forcePermissions": {
            "type": "boolean",
            "description": ""
          },
          "addSamlAttributesToJwt": {
            "type": "boolean",
            "description": ""
          },
          "authStrategy": {
            "enum": [
              "Code",
              "EmailAndPassword",
              "MagicLink",
              "NoLocalAuthentication",
              "SmsCode"
            ],
            "type": "string",
            "description": ""
          },
          "defaultPasswordlessTokenExpiration": {
            "type": "number",
            "description": ""
          },
          "forceSameDeviceOnAuth": {
            "type": "boolean",
            "description": ""
          },
          "allowTenantInvitations": {
            "type": "boolean",
            "description": ""
          },
          "rotateRefreshTokens": {
            "type": "boolean",
            "description": ""
          },
          "skipTenantValidation": {
            "type": "boolean",
            "description": ""
          },
          "addRolesToJwt": {
            "type": "boolean",
            "description": ""
          },
          "addPermissionsToJwt": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "VendorConfigResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "defaultTokenExpiration": {
            "type": "number",
            "description": ""
          },
          "defaultRefreshTokenExpiration": {
            "type": "number",
            "description": ""
          },
          "publicKey": {
            "type": "string",
            "description": ""
          },
          "cookieSameSite": {
            "enum": [
              "STRICT",
              "LAX",
              "NONE"
            ],
            "type": "string",
            "description": ""
          },
          "allowSignups": {
            "type": "boolean",
            "description": ""
          },
          "apiTokensEnabled": {
            "type": "boolean",
            "description": ""
          },
          "allowOverridePasswordComplexity": {
            "type": "boolean",
            "description": ""
          },
          "allowOverridePasswordExpiration": {
            "type": "boolean",
            "description": ""
          },
          "allowOverrideEnforcePasswordHistory": {
            "type": "boolean",
            "description": ""
          },
          "jwtAlgorithm": {
            "enum": [
              "RS256",
              "HS256"
            ],
            "type": "string",
            "description": ""
          },
          "jwtSecret": {
            "type": "string",
            "description": ""
          },
          "allowNotVerifiedUsersLogin": {
            "type": "boolean",
            "description": ""
          },
          "forcePermissions": {
            "type": "boolean",
            "description": ""
          },
          "authStrategy": {
            "enum": [
              "EmailAndPassword",
              "MagicLink",
              "Code",
              "NoLocalAuthentication",
              "SmsCode",
              "UsernameAndPassword",
              "UsernameAndMagicLink",
              "UsernameAndCode",
              "UsernameAndSms"
            ],
            "type": "string",
            "description": ""
          },
          "defaultPasswordlessTokenExpiration": {
            "type": "number",
            "description": ""
          },
          "forceSameDeviceOnAuth": {
            "type": "boolean",
            "description": ""
          },
          "allowTenantInvitations": {
            "type": "boolean",
            "description": ""
          },
          "rotateRefreshTokens": {
            "type": "boolean",
            "description": ""
          },
          "machineToMachineAuthStrategy": {
            "enum": [
              "ClientCredentials",
              "AccessToken"
            ],
            "type": "string",
            "description": ""
          },
          "addRolesToJwt": {
            "type": "boolean",
            "description": ""
          },
          "addPermissionsToJwt": {
            "type": "boolean",
            "description": ""
          },
          "refreshTokensRotationLimit": {
            "type": "number",
            "description": ""
          },
          "addSamlAttributesToJwt": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "id",
          "defaultTokenExpiration",
          "defaultRefreshTokenExpiration",
          "publicKey",
          "cookieSameSite",
          "allowSignups",
          "apiTokensEnabled",
          "allowOverridePasswordComplexity",
          "allowOverridePasswordExpiration",
          "allowOverrideEnforcePasswordHistory",
          "jwtAlgorithm",
          "jwtSecret",
          "allowNotVerifiedUsersLogin",
          "forcePermissions",
          "authStrategy",
          "defaultPasswordlessTokenExpiration",
          "forceSameDeviceOnAuth",
          "allowTenantInvitations",
          "rotateRefreshTokens",
          "machineToMachineAuthStrategy",
          "addRolesToJwt",
          "addPermissionsToJwt",
          "refreshTokensRotationLimit",
          "addSamlAttributesToJwt"
        ]
      },
      "MfaAuthAppConfig": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "serviceName": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "active",
          "serviceName"
        ]
      },
      "MfaSmsConfig": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "minimum": 300,
            "description": ""
          }
        },
        "required": [
          "active",
          "tokenLifetimeSeconds"
        ]
      },
      "MfaEmailConfig": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "minimum": 300,
            "description": ""
          },
          "sender": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "active",
          "tokenLifetimeSeconds",
          "sender"
        ]
      },
      "MfaConfigRequest": {
        "type": "object",
        "properties": {
          "authenticationApp": {
            "$ref": "#/components/schemas/MfaAuthAppConfig",
            "description": ""
          },
          "sms": {
            "$ref": "#/components/schemas/MfaSmsConfig",
            "description": ""
          },
          "email": {
            "$ref": "#/components/schemas/MfaEmailConfig",
            "description": ""
          }
        }
      },
      "AuthenticationAppConfiguration": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "serviceName": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "active",
          "serviceName"
        ]
      },
      "SmsConfiguration": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "active",
          "tokenLifetimeSeconds"
        ]
      },
      "EmailConfiguration": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "tokenLifetimeSeconds": {
            "type": "number",
            "description": ""
          },
          "sender": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "active",
          "tokenLifetimeSeconds",
          "sender"
        ]
      },
      "MfaConfigResponse": {
        "type": "object",
        "properties": {
          "authenticationApp": {
            "$ref": "#/components/schemas/AuthenticationAppConfiguration",
            "description": ""
          },
          "sms": {
            "$ref": "#/components/schemas/SmsConfiguration",
            "description": ""
          },
          "email": {
            "$ref": "#/components/schemas/EmailConfiguration",
            "description": ""
          }
        },
        "required": [
          "authenticationApp",
          "sms",
          "email"
        ]
      },
      "OptionalTestsConfig": {
        "type": "object",
        "properties": {
          "requireLowercase": {
            "type": "boolean",
            "description": "Require at least one lowercase letter"
          },
          "requireUppercase": {
            "type": "boolean",
            "description": "Require at least one uppercase letter"
          },
          "requireNumbers": {
            "type": "boolean",
            "description": "Require at least one number"
          },
          "requireSpecialChars": {
            "type": "boolean",
            "description": "Require at least one special character"
          }
        }
      },
      "RequiredTestsConfig": {
        "type": "object",
        "properties": {
          "checkThreeRepeatedChars": {
            "type": "boolean",
            "description": "Check if the password contains three repeated characters"
          }
        }
      },
      "PasswordConfigRequest": {
        "type": "object",
        "properties": {
          "allowPassphrases": {
            "type": "boolean",
            "description": ""
          },
          "maxLength": {
            "type": "number",
            "description": ""
          },
          "minLength": {
            "type": "number",
            "description": ""
          },
          "minPhraseLength": {
            "type": "number",
            "description": ""
          },
          "minOptionalTestsToPass": {
            "type": "number",
            "description": ""
          },
          "blockPwnedPasswords": {
            "type": "boolean",
            "description": ""
          },
          "optionalTests": {
            "$ref": "#/components/schemas/OptionalTestsConfig",
            "description": ""
          },
          "requiredTests": {
            "$ref": "#/components/schemas/RequiredTestsConfig",
            "description": ""
          }
        }
      },
      "PasswordConfigResponse": {
        "type": "object",
        "properties": {
          "allowPassphrases": {
            "type": "boolean",
            "description": ""
          },
          "maxLength": {
            "type": "number",
            "description": ""
          },
          "minLength": {
            "type": "number",
            "description": ""
          },
          "minPhraseLength": {
            "type": "number",
            "description": ""
          },
          "minOptionalTestsToPass": {
            "type": "number",
            "description": ""
          },
          "blockPwnedPasswords": {
            "type": "boolean",
            "description": ""
          },
          "optionalTests": {
            "type": "object",
            "description": ""
          },
          "requiredTests": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "blockPwnedPasswords"
        ]
      },
      "MfaPolicyRequest": {
        "type": "object",
        "properties": {
          "enforceMFAType": {
            "type": "string",
            "enum": [
              "DontForce",
              "Force",
              "ForceExceptSAML"
            ],
            "description": "Determine whether MFA should be enforced.",
            "default": "Force"
          },
          "allowRememberMyDevice": {
            "type": "boolean",
            "description": "Determine whether devices can be remembered and authentication can be skipped.",
            "default": false
          },
          "mfaDeviceExpiration": {
            "type": "number",
            "description": "Expiration time of device in seconds",
            "default": 1209600
          }
        }
      },
      "MfaPolicyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "enforceMFAType": {
            "type": "string",
            "description": ""
          },
          "allowRememberMyDevice": {
            "type": "boolean",
            "description": ""
          },
          "mfaDeviceExpiration": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "allowRememberMyDevice",
          "mfaDeviceExpiration",
          "createdAt",
          "updatedAt"
        ]
      },
      "LockoutPolicyRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determine whether the Lockout Policy is enabled"
          },
          "maxAttempts": {
            "type": "number",
            "description": "The number of the maximum login attempts user can do",
            "minimum": 1
          }
        },
        "required": [
          "enabled",
          "maxAttempts"
        ]
      },
      "LockoutPolicyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "enabled": {
            "type": "boolean",
            "description": ""
          },
          "maxAttempts": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "enabled",
          "maxAttempts",
          "createdAt",
          "updatedAt"
        ]
      },
      "PasswordHistoryPolicyRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Detemine whether the history policy is enbaled.",
            "default": false
          },
          "historySize": {
            "type": "number",
            "description": "Number of passwords per user to remember in the history.",
            "maximum": 10,
            "minimum": 1,
            "default": 1
          }
        },
        "required": [
          "enabled",
          "historySize"
        ]
      },
      "PasswordHistoryPolicyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "enabled": {
            "type": "boolean",
            "description": ""
          },
          "historySize": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "enabled",
          "historySize",
          "createdAt",
          "updatedAt"
        ]
      },
      "CaptchaPolicyRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": ""
          },
          "siteKey": {
            "type": "string",
            "description": ""
          },
          "secretKey": {
            "type": "string",
            "description": ""
          },
          "minScore": {
            "type": "number",
            "description": ""
          },
          "ignoredEmails": {
            "description": "Captcha validation will be skipped for those emails.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "enabled",
          "siteKey",
          "secretKey",
          "minScore"
        ]
      },
      "CaptchaPolicyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "siteKey": {
            "type": "string",
            "description": ""
          },
          "secretKey": {
            "type": "string",
            "description": ""
          },
          "enabled": {
            "type": "boolean",
            "description": ""
          },
          "minScore": {
            "type": "number",
            "description": ""
          },
          "ignoredEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "siteKey",
          "secretKey",
          "enabled",
          "minScore",
          "ignoredEmails",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateTemplateDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ResetPassword",
              "ActivateUser",
              "InviteToTenant",
              "PwnedPassword",
              "MagicLink",
              "OTC",
              "ConnectNewDevice",
              "UserUsedInvitation",
              "ResetPhoneNumber",
              "BulkInvitesToTenant",
              "MFAEnroll",
              "MFAUnenroll",
              "NewMFAMethod",
              "MFARecoveryCode",
              "RemoveMFAMethod",
              "EmailVerification",
              "BruteForceProtection",
              "SuspiciousIP",
              "MFAOTC",
              "ImpossibleTravel",
              "BotDetection",
              "SmsAuthenticationEnabled",
              "UnlockUser",
              "UnlockUserSuccess",
              "ActivateUserWithCode",
              "InviteToTenantWithCode",
              "VerifyNewEmail",
              "EmailAddressChanged"
            ],
            "description": ""
          },
          "senderEmail": {
            "type": "string",
            "description": ""
          },
          "subject": {
            "type": "string",
            "description": ""
          },
          "fromName": {
            "type": "string",
            "description": ""
          },
          "redirectURL": {
            "type": "string",
            "description": "Only required for: ResetPassword, ActivateUser, InviteToTenant, MagicLink, BulkInvitesToTenant"
          },
          "htmlTemplate": {
            "type": "string",
            "maxLength": 1000000,
            "description": ""
          },
          "successRedirectUrl": {
            "type": "string",
            "description": ""
          },
          "active": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "type"
        ]
      },
      "GetTemplateResponseDto": {
        "type": "object",
        "properties": {
          "htmlTemplate": {
            "type": "string",
            "description": ""
          },
          "senderEmail": {
            "type": "string",
            "description": ""
          },
          "redirectURL": {
            "type": "string",
            "description": ""
          },
          "successRedirectUrl": {
            "type": "string",
            "description": ""
          },
          "subject": {
            "type": "string",
            "description": ""
          },
          "fromName": {
            "type": "string",
            "description": ""
          },
          "active": {
            "type": "boolean",
            "description": ""
          },
          "type": {
            "type": "object",
            "description": ""
          },
          "redirectURLPattern": {
            "type": "string",
            "description": ""
          },
          "successRedirectUrlPattern": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "htmlTemplate",
          "senderEmail",
          "redirectURL",
          "successRedirectUrl",
          "subject",
          "fromName",
          "active",
          "type"
        ]
      },
      "CreateOrUpdateMailConfigRequestDto": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "secret"
        ]
      },
      "GetMailConfigResponseDto": {
        "type": "object",
        "properties": {
          "secret": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "extension": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": ""
          },
          "provider": {
            "type": "string",
            "enum": [
              "sendgrid",
              "mailgun",
              "ses",
              "ses-role"
            ],
            "description": ""
          }
        },
        "required": [
          "secret",
          "createdAt",
          "updatedAt",
          "extension",
          "provider"
        ]
      },
      "SendGridDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "sendgrid"
            ],
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "provider",
          "secret"
        ]
      },
      "SesDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "ses"
            ],
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "id": {
            "type": "string",
            "description": ""
          },
          "region": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "provider",
          "secret",
          "id",
          "region"
        ]
      },
      "MailgunDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "mailgun"
            ],
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "domain": {
            "type": "string",
            "description": ""
          },
          "region": {
            "default": "us",
            "enum": [
              {
                "US": "us",
                "EU": "eu"
              }
            ],
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "provider",
          "secret",
          "domain",
          "region"
        ]
      },
      "SesRoleDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "ses-role"
            ],
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "region": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "provider",
          "secret",
          "region"
        ]
      },
      "CreateTenantApiTokenDto": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "roleIds": {
            "description": "Array of role Ids. Either this or permissionIds must be provided, but not both.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissionIds": {
            "description": "Array of permission Ids. Either this or roleIds must be provided, but not both. roleIds will override permissionIds.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expiresInMinutes": {
            "type": "number",
            "minimum": 1,
            "description": "Token expiration time in minutes. In case of undefined, the token won't be expired"
          }
        }
      },
      "CreateTenantApiTokenResponseDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "permissionIds": {
            "description": "Array of permission Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "description": "Array of role Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientId",
          "description",
          "tenantId",
          "secret",
          "createdByUserId",
          "metadata",
          "createdAt"
        ]
      },
      "GetTenantApiTokensResponse": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "permissionIds": {
            "description": "Array of permission Ids. Either this or roleIds will be present, but not both.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "description": "Array of role Ids. Either this or permissionIds will be present, but not both.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientId",
          "description",
          "tenantId",
          "createdByUserId",
          "metadata",
          "createdAt",
          "permissionIds",
          "roleIds",
          "expires"
        ]
      },
      "UpdateApiTokenDto": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "roleIds": {
            "description": "Array of role Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissionIds": {
            "description": "Array of permission Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateTenantApiTokenResponseDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "createdByUserId": {
            "type": "string",
            "nullable": true,
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "permissionIds": {
            "description": "Array of permission Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "roleIds": {
            "description": "Array of role Ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientId",
          "description",
          "tenantId",
          "createdByUserId",
          "metadata",
          "createdAt"
        ]
      },
      "CreateUserApiTokenDto": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "expiresInMinutes": {
            "type": "number",
            "minimum": 1,
            "maximum": 5256000,
            "description": "Token expiration time in minutes. In case of undefined, the token won't be expired"
          }
        }
      },
      "CreateUserApiTokenResponseDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientId",
          "description",
          "metadata",
          "createdAt",
          "secret"
        ]
      },
      "GetUserApiTokensResponseDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "metadata": {
            "type": "object",
            "description": "Extra data that will be encoded as part of the JWT"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientId",
          "description",
          "metadata",
          "createdAt"
        ]
      },
      "RoleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "vendorId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "isDefault": {
            "type": "boolean",
            "description": ""
          },
          "firstUserRole": {
            "type": "boolean",
            "description": ""
          },
          "level": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "id",
          "vendorId",
          "tenantId",
          "key",
          "name",
          "description",
          "isDefault",
          "firstUserRole",
          "level",
          "createdAt",
          "updatedAt",
          "permissions"
        ]
      },
      "UserTenantDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            },
            "description": ""
          },
          "temporaryExpirationDate": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "isDisabled": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "roles"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "description": ""
          },
          "sub": {
            "type": "string",
            "description": ""
          },
          "verified": {
            "type": "boolean",
            "description": ""
          },
          "mfaEnrolled": {
            "type": "boolean",
            "description": ""
          },
          "mfaBypass": {
            "type": "boolean",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            },
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionResponse"
            },
            "description": ""
          },
          "provider": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "activatedForTenant": {
            "type": "boolean",
            "description": ""
          },
          "isLocked": {
            "type": "boolean",
            "description": ""
          },
          "tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTenantDto"
            },
            "description": ""
          },
          "invisible": {
            "type": "boolean",
            "description": ""
          },
          "superUser": {
            "type": "boolean",
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": ""
          },
          "vendorMetadata": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": ""
          },
          "subAccountAccessAllowed": {
            "type": "boolean",
            "description": ""
          },
          "managedBy": {
            "enum": [
              "frontegg",
              "scim2",
              "external"
            ],
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "profilePictureUrl",
          "sub",
          "verified",
          "mfaEnrolled",
          "roles",
          "permissions",
          "provider",
          "tenantId",
          "tenantIds",
          "tenants",
          "metadata",
          "vendorMetadata",
          "createdAt",
          "lastLogin",
          "subAccountAccessAllowed"
        ]
      },
      "ValidateUserPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ValidateUserPasswordResponse": {
        "type": "object",
        "properties": {}
      },
      "CreateUserDtoVendorOnly": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          },
          "username": {
            "type": "string",
            "description": "The username of the user. If not provided, the email is required. Maximum length is 255 characters.",
            "maxLength": 255
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object"
          },
          "vendorMetadata": {
            "type": "string",
            "description": "Extra vendor-only data. stringified JSON object"
          },
          "roleIds": {
            "description": "Role IDs to assign to the user",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "expirationInSeconds": {
            "type": "number",
            "description": "Temporary user expiration in seconds"
          },
          "mfaBypass": {
            "type": "boolean",
            "description": "Bypass MFA for this user"
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "CreateInviteTokenRequest": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "expiresInMinutes": {
            "type": "number",
            "description": ""
          },
          "shouldSendEmail": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "InviteTokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "vendorId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "expires": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "shouldSendEmail": {
            "type": "boolean",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "vendorId",
          "tenantId",
          "token",
          "expires",
          "shouldSendEmail"
        ]
      },
      "CreateInviteTokenRequestForUser": {
        "type": "object",
        "properties": {
          "expiresInMinutes": {
            "type": "number",
            "description": ""
          },
          "shouldSendEmail": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "expiresInMinutes",
          "shouldSendEmail"
        ]
      },
      "UpdateInviteTokenRequest": {
        "type": "object",
        "properties": {
          "expiresInMinutes": {
            "type": "number",
            "description": ""
          },
          "shouldSendEmail": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "VerifyInviteTokenRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "token"
        ]
      },
      "InvitationConfigurationResponse": {
        "type": "object",
        "properties": {
          "tenantInvitationsAllowed": {
            "type": "boolean",
            "description": ""
          },
          "emailsEnabled": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "tenantInvitationsAllowed",
          "emailsEnabled"
        ]
      },
      "SessionIdleTimeoutConfigurationDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": ""
          },
          "timeout": {
            "type": "number",
            "minimum": 60,
            "maximum": 2073600,
            "description": ""
          }
        },
        "required": [
          "isActive",
          "timeout"
        ]
      },
      "SessionTimeoutConfigurationDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": ""
          },
          "timeout": {
            "type": "number",
            "minimum": 60,
            "description": ""
          }
        },
        "required": [
          "isActive",
          "timeout"
        ]
      },
      "SessionConcurrentConfigurationDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": ""
          },
          "maxSessions": {
            "type": "number",
            "minimum": 1,
            "description": ""
          }
        },
        "required": [
          "isActive",
          "maxSessions"
        ]
      },
      "CreateSessionConfigurationRequest": {
        "type": "object",
        "properties": {
          "sessionIdleTimeoutConfiguration": {
            "$ref": "#/components/schemas/SessionIdleTimeoutConfigurationDto",
            "description": ""
          },
          "sessionTimeoutConfiguration": {
            "$ref": "#/components/schemas/SessionTimeoutConfigurationDto",
            "description": ""
          },
          "sessionConcurrentConfiguration": {
            "$ref": "#/components/schemas/SessionConcurrentConfigurationDto",
            "description": ""
          }
        }
      },
      "MFAStrategyResponse": {
        "type": "object",
        "properties": {
          "strategy": {
            "enum": [
              "AuthenticatorApp",
              "WebAuthnPlatform",
              "WebAuthnCrossPlatform",
              "SMS",
              "EmailCode"
            ],
            "type": "string",
            "description": ""
          },
          "isActive": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "strategy",
          "isActive"
        ]
      },
      "MFAStrategiesResponse": {
        "type": "object",
        "properties": {
          "strategies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MFAStrategyResponse"
            },
            "description": ""
          }
        },
        "required": [
          "strategies"
        ]
      },
      "CreateOrUpdateMFAStrategyRequest": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": ""
          },
          "strategy": {
            "type": "string",
            "enum": [
              "AuthenticatorApp",
              "WebAuthnPlatform",
              "WebAuthnCrossPlatform",
              "SMS",
              "EmailCode"
            ],
            "description": ""
          }
        },
        "required": [
          "isActive",
          "strategy"
        ]
      },
      "RoleDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "vendorId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "isDefault": {
            "type": "boolean",
            "description": ""
          },
          "firstUserRole": {
            "type": "boolean",
            "description": ""
          },
          "level": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "vendorId",
          "tenantId",
          "key",
          "name",
          "description",
          "isDefault",
          "firstUserRole",
          "level",
          "createdAt",
          "updatedAt"
        ]
      },
      "GroupUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "activatedForTenant": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "profilePictureUrl",
          "createdAt",
          "activatedForTenant"
        ]
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "color": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleDto"
            },
            "description": ""
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupUserDto"
            },
            "description": ""
          },
          "managedBy": {
            "enum": [
              "frontegg",
              "scim2"
            ],
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "color",
          "description",
          "metadata",
          "roles",
          "users",
          "managedBy",
          "createdAt",
          "updatedAt"
        ]
      },
      "GroupsResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            },
            "description": ""
          }
        },
        "required": [
          "groups"
        ]
      },
      "GetGroupsDto": {
        "type": "object",
        "properties": {
          "groupsIds": {
            "description": "Group IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "groupsIds"
        ]
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Color for group display"
          },
          "description": {
            "type": "string",
            "description": "Group description"
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object",
            "example": "{}"
          },
          "name": {
            "type": "string",
            "description": "Group unique name"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateGroupDto": {
        "type": "object",
        "properties": {
          "color": {
            "type": "string",
            "description": "Color for group display"
          },
          "description": {
            "type": "string",
            "description": "Group description"
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object",
            "example": "{}"
          },
          "name": {
            "type": "string",
            "description": "Group unique name"
          }
        }
      },
      "GetGroupConfigurationResponse": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": ""
          },
          "rolesEnabled": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "enabled",
          "rolesEnabled"
        ]
      },
      "CreateOrUpdateGroupConfigurationDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Determine whether groups are enabled/disabled. Default value is true.",
            "default": true
          },
          "rolesEnabled": {
            "type": "boolean",
            "description": "Determine whether groups can have roles or not. Default value is true.",
            "default": true
          }
        }
      },
      "UpdateRolesOnGroupDto": {
        "type": "object",
        "properties": {
          "roleIds": {
            "description": "Will add / remove requested roles from the group",
            "example": [
              "5fbae0d3-a3b7-4b1e-8d64-6c9428f84aae",
              "8b2d0f9a-f39e-49b3-98ca-93c85c06d1a7"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "UpdateUsersOnGroupDto": {
        "type": "object",
        "properties": {
          "userIds": {
            "description": "An array of User IDs to add / remove existing users to / from the group.",
            "example": [
              "262io276-3c5v-9y31-ba03-281674a89d4c",
              "eeooc819-87dd-1cdd-b81d-e8829vm9d684"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "userIds"
        ]
      },
      "FronteggPaginationWrapper": {
        "type": "object",
        "properties": {}
      },
      "FronteggPaginationLinks": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "description": ""
          },
          "prev": {
            "type": "string",
            "description": ""
          },
          "first": {
            "type": "string",
            "description": ""
          },
          "last": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "next",
          "prev",
          "first",
          "last"
        ]
      },
      "FronteggPaginationMetadata": {
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "number",
            "description": ""
          },
          "totalPages": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "totalItems",
          "totalPages"
        ]
      },
      "TenantStatus": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "status": {
            "type": "string",
            "enum": [
              "PendingInvitation",
              "PendingLogin",
              "Activated",
              "NotActivated"
            ],
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "status"
        ]
      },
      "UserTenantStatusesResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "tenantsStatuses": {
            "description": "Tenants Statuses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantStatus"
            }
          }
        },
        "required": [
          "userId",
          "tenantsStatuses"
        ]
      },
      "AddRoleRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "isDefault": {
            "type": "boolean",
            "description": "This role will be assigned for every user that will be added without specified roles"
          },
          "migrateRole": {
            "type": "boolean",
            "description": "Set this property to `true` together with `isDefault` in order to assign this role to all users"
          },
          "firstUserRole": {
            "type": "boolean",
            "description": "This role will be assigned to the first user of a tenant (new tenants only)"
          },
          "level": {
            "type": "number",
            "minimum": 0,
            "maximum": 32767,
            "description": "Role level for roles elevation, lower level means stronger role."
          }
        },
        "required": [
          "key",
          "name",
          "level"
        ]
      },
      "UpdateRoleRequest": {
        "type": "object",
        "properties": {
          "isDefault": {
            "type": "boolean",
            "description": "This role will be assigned for every user that will be added without specified roles"
          },
          "firstUserRole": {
            "type": "boolean",
            "description": "This role will be assigned to the first user of a tenant (new tenants only)"
          },
          "migrateRole": {
            "type": "boolean",
            "description": "Set this property to `true` together with `isDefault` in order to assign this role to all users"
          },
          "level": {
            "type": "number",
            "minimum": 0,
            "maximum": 32767,
            "description": "Role level for roles elevation, lower level means stronger role."
          },
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          }
        }
      },
      "AddPermissionToRoleRequest": {
        "type": "object",
        "properties": {
          "permissionIds": {
            "description": "Set permission Ids to attach to the role",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "permissionIds"
        ]
      },
      "UpdateRoleTenantRequest": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "nullable": true,
            "description": ""
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "AddRoleWithPermissionsRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "isDefault": {
            "type": "boolean",
            "description": "This role will be assigned for every user that will be added without specified roles"
          },
          "baseRoleId": {
            "type": "string",
            "description": "Role level of the new role will be based on this parameter"
          },
          "permissionIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "key",
          "name",
          "baseRoleId",
          "permissionIds"
        ]
      },
      "AddRoleWithPermissionsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "vendorId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "isDefault": {
            "type": "boolean",
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "id",
          "vendorId",
          "tenantId",
          "key",
          "name",
          "description",
          "isDefault",
          "permissions"
        ]
      },
      "TemporaryUserDto": {
        "type": "object",
        "properties": {
          "expirationInSeconds": {
            "type": "number",
            "minimum": 300,
            "description": ""
          }
        },
        "required": [
          "expirationInSeconds"
        ]
      },
      "TemporaryUsersConfigurationDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "enabled"
        ]
      },
      "UserPhoneNumberResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "verified": {
            "type": "boolean",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "userId",
          "phoneNumber",
          "verified",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateUserPhoneNumberRequestDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "New phone number"
          },
          "verify": {
            "type": "boolean",
            "default": true,
            "description": "Should send verification code, default is true"
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "UserPhoneNumberCreatedResponseDto": {
        "type": "object",
        "properties": {}
      },
      "PreVerifyUserPhoneNumberRequestDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "New phone number"
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "VerifyPhoneNumberOTCRequestDto": {
        "type": "object",
        "properties": {
          "otcToken": {
            "type": "string",
            "description": "OTC token"
          },
          "code": {
            "type": "string",
            "description": "Code that was sent to the user"
          }
        },
        "required": [
          "otcToken",
          "code"
        ]
      },
      "UserPhoneNumberDeleteCodeResponseDto": {
        "type": "object",
        "properties": {}
      },
      "UserBulkInviteRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": ""
          },
          "username": {
            "type": "string",
            "maxLength": 255,
            "pattern": "/^[a-zA-Z0-9._-]+$/",
            "description": "The username of the user. If not provided, the email is required. Maximum length is 255 characters."
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "maxLength": 4095,
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "provider": {
            "type": "string",
            "default": "local",
            "enum": [
              "local",
              "saml",
              "google",
              "github",
              "facebook",
              "microsoft",
              "scim2",
              "slack",
              "apple"
            ],
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object",
            "example": "{}"
          },
          "skipInviteEmail": {
            "type": "boolean",
            "description": ""
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "emailMetadata": {
            "type": "object",
            "description": ""
          },
          "expirationInSeconds": {
            "type": "number",
            "minimum": 300,
            "description": "Temporary user expiration in seconds"
          },
          "verified": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "UsersBulkInviteRequestDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBulkInviteRequestDto"
            },
            "description": ""
          }
        },
        "required": [
          "users"
        ]
      },
      "TaskContext": {
        "type": "object",
        "properties": {}
      },
      "Auth0Configuration": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": ""
          },
          "clientId": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "tenantIdFieldName": {
            "type": "string",
            "description": "The field name that the tenant ID will be taken from under app metadata"
          },
          "isTenantIdOnUserMetadata": {
            "type": "boolean",
            "description": "If you would like to take tenant ID from user metadata, set this field to true"
          }
        },
        "required": [
          "domain",
          "clientId",
          "secret",
          "tenantIdFieldName"
        ]
      },
      "PasswordHashingType": {
        "type": "string",
        "enum": [
          "bcrypt",
          "scrypt",
          "firebase-scrypt",
          "pbkdf2",
          "argon2",
          "sha256",
          "sha1"
        ]
      },
      "PhoneNumberType": {
        "type": "string",
        "enum": [
          "auth",
          "mfa"
        ]
      },
      "MigrateUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          },
          "username": {
            "type": "string",
            "description": "The username of the user. If not provided, the email is required"
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "description": "",
            "maxLength": 4095
          },
          "passwordHash": {
            "type": "string",
            "description": "The password hash. For SCrypt should include the salt and key seperated by the salt separator"
          },
          "passwordHashType": {
            "$ref": "#/components/schemas/PasswordHashingType",
            "description": ""
          },
          "passwordHashConfig": {
            "type": "string",
            "maxLength": 4095,
            "description": "Stringified JSON Hashing config for the migrated password. For SCrypt should be formatted as { saltSeparator, N, r, p, keyLen }. For FirebaseScrypt should be formatted as { memCost, rounds, saltSeparator, signerKey }"
          },
          "authenticatorAppMfaSecret": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": "phoneNumber can be used either for login with SMS or for MFA, in combination with `phoneNumberType`. The required format is `area code + number`, without spaces. For example: `+16037184056`. Note that the number must be unique"
          },
          "phoneNumberType": {
            "$ref": "#/components/schemas/PhoneNumberType",
            "description": ""
          },
          "provider": {
            "type": "string",
            "enum": [
              "local",
              "saml",
              "google",
              "github",
              "facebook",
              "microsoft",
              "scim2",
              "slack",
              "apple"
            ],
            "default": "local",
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object"
          },
          "verifyUser": {
            "type": "boolean",
            "default": false,
            "description": "Whether to verify the user as part of the migration process. If this is set to false, another call is required for the verify user API"
          },
          "roleIds": {
            "default": [],
            "description": "Role Ids of the migrated users. If not provided, the user will be assigned the default roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "vendorMetadata": {
            "type": "string",
            "description": "Additional vendor-only data. stringified JSON object"
          }
        },
        "required": [
          "email",
          "tenantId"
        ]
      },
      "MigrateUsersRequest": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MigrateUserRequest"
            },
            "description": ""
          }
        },
        "required": [
          "users"
        ]
      },
      "MigrationContext": {
        "type": "object",
        "properties": {
          "migrationId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "migrationId"
        ]
      },
      "MigrationObject": {
        "type": "object",
        "properties": {}
      },
      "UpdateSubAccountAccessRequestDto": {
        "type": "object",
        "properties": {
          "allowAccess": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "allowAccess"
        ]
      },
      "ResetPasswordV1Dto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": ""
          },
          "emailMetadata": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "email"
        ]
      },
      "VerifyPasswordDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "token",
          "password"
        ]
      },
      "UpdateUserPasswordDto": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": ""
          },
          "newPassword": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "password",
          "newPassword"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "User identifier (phone number or email)"
          },
          "identifierType": {
            "enum": [
              "email",
              "phoneNumber",
              "username"
            ],
            "type": "string",
            "description": "Type of the identifier"
          },
          "emailMetadata": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "identifier",
          "identifierType"
        ]
      },
      "ResetPasswordViaSmsResponseDto": {
        "type": "object",
        "properties": {
          "sessionId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "sessionId"
        ]
      },
      "VerifyPasswordViaSmsRequestDto": {
        "type": "object",
        "properties": {
          "otcToken": {
            "type": "string",
            "description": ""
          },
          "sessionId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "otcToken",
          "sessionId"
        ]
      },
      "VerifyPasswordViaSmsResponseDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "token"
        ]
      },
      "ResetActivationTokenDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": ""
          },
          "emailMetadata": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "email",
          "emailMetadata"
        ]
      },
      "CreateCustomSsoRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": ""
          },
          "clientId": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "redirectUrl": {
            "type": "string",
            "description": ""
          },
          "authorizationUrl": {
            "type": "string",
            "description": ""
          },
          "tokenUrl": {
            "type": "string",
            "description": ""
          },
          "userInfoUrl": {
            "type": "string",
            "description": ""
          },
          "scopes": {
            "type": "string",
            "description": ""
          },
          "ssoLogoUrl": {
            "type": "string",
            "description": ""
          },
          "displayName": {
            "type": "string",
            "description": ""
          },
          "active": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "type",
          "clientId",
          "secret",
          "redirectUrl",
          "authorizationUrl",
          "tokenUrl",
          "userInfoUrl",
          "scopes",
          "ssoLogoUrl",
          "displayName",
          "active"
        ]
      },
      "UpdateCustomSsoRequestDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": ""
          },
          "clientId": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          },
          "redirectUrl": {
            "type": "string",
            "description": ""
          },
          "authorizationUrl": {
            "type": "string",
            "description": ""
          },
          "tokenUrl": {
            "type": "string",
            "description": ""
          },
          "userInfoUrl": {
            "type": "string",
            "description": ""
          },
          "scopes": {
            "type": "string",
            "description": ""
          },
          "ssoLogoUrl": {
            "type": "string",
            "description": ""
          },
          "displayName": {
            "type": "string",
            "description": ""
          },
          "active": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "AssignUsersToAppRequestDto": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "appId",
          "tenantId",
          "userIds"
        ]
      },
      "ApplicationUserTenantsResponseDto": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": ""
          },
          "userTenantId": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "appId",
          "userTenantId",
          "createdAt"
        ]
      },
      "UnassignUsersFromAppRequestDto": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "appId",
          "tenantId",
          "userIds"
        ]
      },
      "UserApplicationActiveTenantResponse": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "applicationId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "applicationId"
        ]
      },
      "UserApplicationActiveTenantsResponseDto": {
        "type": "object",
        "properties": {
          "applicationActiveTenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserApplicationActiveTenantResponse"
            },
            "description": ""
          }
        },
        "required": [
          "applicationActiveTenants"
        ]
      },
      "SwitchApplicationActiveUserTenantDto": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "Desired application to set active tenant in"
          },
          "tenantId": {
            "type": "string",
            "description": "Desired tenant to set as active tenant for user in application"
          }
        },
        "required": [
          "applicationId",
          "tenantId"
        ]
      },
      "SwitchApplicationActiveUserTenantsRequestDto": {
        "type": "object",
        "properties": {
          "activeApplicationTenants": {
            "description": "List of applications and tenants to set as active, for user",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SwitchApplicationActiveUserTenantDto"
            }
          }
        },
        "required": [
          "activeApplicationTenants"
        ]
      },
      "GetDelegationConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether delegation has been enabled or disabled.",
            "example": "true"
          }
        },
        "required": [
          "enabled"
        ]
      },
      "CreateDelegationConfigurationRequestDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Used to enable or disable delegation for access tokens created using Token Exchange.",
            "example": "true"
          }
        }
      },
      "DisableMFAAuthAppRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": ""
          }
        }
      },
      "RequestDisableMFARequest": {
        "type": "object",
        "properties": {}
      },
      "RequestDisableMFASMSResponse": {
        "type": "object",
        "properties": {}
      },
      "DisableMFASMSRequest": {
        "type": "object",
        "properties": {
          "otcToken": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "otcToken",
          "code"
        ]
      },
      "ResetTenantInvitationDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "email"
        ]
      },
      "UserV3Dto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "description": ""
          },
          "sub": {
            "type": "string",
            "description": ""
          },
          "verified": {
            "type": "boolean",
            "description": ""
          },
          "mfaEnrolled": {
            "type": "boolean",
            "description": ""
          },
          "mfaBypass": {
            "type": "boolean",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "provider": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "activatedForTenant": {
            "type": "boolean",
            "description": ""
          },
          "isLocked": {
            "type": "boolean",
            "description": ""
          },
          "tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTenantDto"
            },
            "description": ""
          },
          "invisible": {
            "type": "boolean",
            "description": ""
          },
          "superUser": {
            "type": "boolean",
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": ""
          },
          "vendorMetadata": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "subAccountAccessAllowed": {
            "type": "boolean",
            "description": ""
          },
          "managedBy": {
            "enum": [
              "frontegg",
              "scim2",
              "external"
            ],
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "profilePictureUrl",
          "sub",
          "verified",
          "mfaEnrolled",
          "provider",
          "tenantId",
          "tenantIds",
          "tenants",
          "metadata",
          "vendorMetadata",
          "createdAt",
          "lastLogin",
          "subAccountAccessAllowed"
        ]
      },
      "GetUserRolesResponse": {
        "type": "object",
        "properties": {}
      },
      "GetUserGroupsResponse": {
        "type": "object",
        "properties": {}
      },
      "UnlockUserRequestDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "token"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": ""
          },
          "username": {
            "type": "string",
            "maxLength": 255,
            "pattern": "/^[a-zA-Z0-9._-]+$/",
            "description": "The username of the user. If not provided, the email is required. Maximum length is 255 characters."
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "maxLength": 4095,
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "provider": {
            "type": "string",
            "default": "local",
            "enum": [
              "local",
              "saml",
              "google",
              "github",
              "facebook",
              "microsoft",
              "scim2",
              "slack",
              "apple"
            ],
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object",
            "example": "{}"
          },
          "skipInviteEmail": {
            "type": "boolean",
            "description": ""
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "emailMetadata": {
            "type": "object",
            "description": ""
          },
          "expirationInSeconds": {
            "type": "number",
            "minimum": 300,
            "description": "Temporary user expiration in seconds"
          }
        }
      },
      "UserCreatedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "verified": {
            "type": "boolean",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "activatedForTenant": {
            "type": "boolean",
            "description": ""
          },
          "temporaryExpirationDate": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        }
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]{1}(\\-?)(([0-9])(\\-?)){5,13}(([0-9]$){1})",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true,
            "maxLength": 4095,
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object",
            "example": "{}"
          },
          "name": {
            "type": "string",
            "description": ""
          }
        }
      },
      "CoreUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "description": ""
          },
          "sub": {
            "type": "string",
            "description": ""
          },
          "verified": {
            "type": "boolean",
            "description": ""
          },
          "mfaEnrolled": {
            "type": "boolean",
            "description": ""
          },
          "mfaBypass": {
            "type": "boolean",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "provider": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "tenantIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "activatedForTenant": {
            "type": "boolean",
            "description": ""
          },
          "isLocked": {
            "type": "boolean",
            "description": ""
          },
          "tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTenantDto"
            },
            "description": ""
          },
          "invisible": {
            "type": "boolean",
            "description": ""
          },
          "superUser": {
            "type": "boolean",
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": ""
          },
          "vendorMetadata": {
            "type": "string",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "subAccountAccessAllowed": {
            "type": "boolean",
            "description": ""
          },
          "managedBy": {
            "type": "string",
            "enum": [
              "frontegg",
              "scim2",
              "external"
            ],
            "description": ""
          }
        },
        "required": [
          "id",
          "email",
          "name",
          "profilePictureUrl",
          "sub",
          "verified",
          "mfaEnrolled",
          "provider",
          "tenantId",
          "tenantIds",
          "tenants",
          "metadata",
          "vendorMetadata",
          "createdAt",
          "lastLogin",
          "subAccountAccessAllowed"
        ]
      },
      "AssignUserToRolesDto": {
        "type": "object",
        "properties": {
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "IRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "key": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "isDefault": {
            "type": "boolean",
            "description": ""
          },
          "level": {
            "type": "number",
            "description": ""
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "key",
          "name",
          "description",
          "isDefault",
          "level",
          "createdAt"
        ]
      },
      "AssignUserToRolesResponseDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRole"
            },
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "userId",
          "roles"
        ]
      },
      "UnassignUserFromRolesDto": {
        "type": "object",
        "properties": {
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        },
        "required": [
          "roleIds"
        ]
      },
      "DeleteUserToRolesResponseDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IRole"
            },
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "userId",
          "roles"
        ]
      },
      "UpdateUserTenantDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Desired tenant to set as active tenant for user"
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "UpdateUserInvisibleDto": {
        "type": "object",
        "properties": {
          "invisible": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "invisible"
        ]
      },
      "UpdateUserSuperuserDto": {
        "type": "object",
        "properties": {
          "superUser": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "superUser"
        ]
      },
      "UpdateVendorUserDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "^\\+[1-9]{1}(\\-?)(([0-9])(\\-?)){5,13}(([0-9]$){1})",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "nullable": true,
            "maxLength": 4095,
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object",
            "example": "{}"
          },
          "vendorMetadata": {
            "type": "string",
            "description": "Extra vendor-only data. stringified JSON object"
          },
          "mfaBypass": {
            "type": "boolean",
            "description": "Indicates whether MFA should be bypassed for this user"
          },
          "name": {
            "type": "string",
            "description": ""
          }
        }
      },
      "UpdateUserTenantWithValidationDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Desired tenant to set as active tenant for user"
          },
          "validateTenantExist": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "AddUserToTenantRequest": {
        "type": "object",
        "properties": {
          "validateTenantExist": {
            "type": "boolean",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "skipInviteEmail": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "tenantId"
        ]
      },
      "UpdateUserEmailDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": ""
          }
        },
        "required": [
          "email"
        ]
      },
      "GenerateUserActivationLinkResponseDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "link",
          "token",
          "userId"
        ]
      },
      "GenerateUserResetPasswordLinkResponseDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "link",
          "token",
          "userId"
        ]
      },
      "MigrateUsersFromTenantToTenantRequest": {
        "type": "object",
        "properties": {
          "srcTenantId": {
            "type": "string",
            "description": ""
          },
          "targetTenantId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "srcTenantId",
          "targetTenantId"
        ]
      },
      "GetUserSourceExtendedResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "type": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "appIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "index": {
            "type": "number",
            "description": ""
          },
          "configuration": {
            "type": "object",
            "description": ""
          },
          "usersCount": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "description",
          "appIds",
          "index",
          "configuration",
          "usersCount"
        ]
      },
      "GetUserSourceResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "type": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "appIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "index": {
            "type": "number",
            "description": ""
          },
          "configuration": {
            "type": "object",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "description",
          "appIds",
          "index",
          "configuration"
        ]
      },
      "UserSourceDynamicTenantConfig": {
        "type": "object",
        "properties": {
          "tenantIdFieldName": {
            "type": "string",
            "description": "The attribute name of which the tenant id would be taken from"
          },
          "tenantResolverType": {
            "type": "string",
            "enum": [
              "dynamic"
            ],
            "description": ""
          }
        },
        "required": [
          "tenantIdFieldName",
          "tenantResolverType"
        ]
      },
      "UserSourceNewTenantConfig": {
        "type": "object",
        "properties": {
          "tenantResolverType": {
            "type": "string",
            "enum": [
              "new"
            ],
            "description": ""
          }
        },
        "required": [
          "tenantResolverType"
        ]
      },
      "UserSourceStaticTenantConfig": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "The tenant id which all of the users would be added to"
          },
          "tenantResolverType": {
            "type": "string",
            "enum": [
              "static"
            ],
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "tenantResolverType"
        ]
      },
      "UserSourceFromSourceTenantConfig": {
        "type": "object",
        "properties": {
          "tenantResolverType": {
            "type": "string",
            "enum": [
              "from-source"
            ],
            "description": ""
          }
        },
        "required": [
          "tenantResolverType"
        ]
      },
      "ExternalAuth0UserSourceConfig": {
        "type": "object",
        "properties": {
          "syncOnLogin": {
            "type": "boolean",
            "description": "Whether to sync user profile attributes on each login"
          },
          "isMigrated": {
            "type": "boolean",
            "description": "Whether to migrate the users"
          },
          "domain": {
            "type": "string",
            "description": "the auth0 domain"
          },
          "clientId": {
            "type": "string",
            "description": "the auth0 application clientId"
          },
          "secret": {
            "type": "string",
            "description": "the auth0 application secret"
          },
          "tenantConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserSourceDynamicTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceStaticTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceNewTenantConfig"
              }
            ],
            "description": ""
          }
        },
        "required": [
          "syncOnLogin",
          "isMigrated",
          "domain",
          "clientId",
          "secret",
          "tenantConfig"
        ]
      },
      "CreateAuth0ExternalUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAuth0UserSourceConfig"
              }
            ]
          },
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        },
        "required": [
          "name",
          "configuration",
          "index"
        ]
      },
      "CreateUserSourceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "type": {
            "type": "string",
            "description": ""
          },
          "appIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "index": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "appIds",
          "description",
          "index"
        ]
      },
      "ExternalCognitoUserSourceConfig": {
        "type": "object",
        "properties": {
          "syncOnLogin": {
            "type": "boolean",
            "description": "Whether to sync user profile attributes on each login"
          },
          "isMigrated": {
            "type": "boolean",
            "description": "Whether to migrate the users"
          },
          "region": {
            "type": "string",
            "description": "The aws region of the cognito user pool"
          },
          "clientId": {
            "type": "string",
            "description": "The cognito app client id"
          },
          "userPoolId": {
            "type": "string",
            "description": "The id of the cognito user pool"
          },
          "accessKeyId": {
            "type": "string",
            "description": "The access key of the aws account"
          },
          "secretAccessKey": {
            "type": "string",
            "description": "The secret of the aws account"
          },
          "clientSecret": {
            "type": "string",
            "description": "The cognito application client secret, required if the app client is configured with a client secret"
          },
          "tenantConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserSourceDynamicTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceStaticTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceNewTenantConfig"
              }
            ],
            "description": ""
          }
        },
        "required": [
          "syncOnLogin",
          "isMigrated",
          "region",
          "clientId",
          "userPoolId",
          "accessKeyId",
          "secretAccessKey",
          "tenantConfig"
        ]
      },
      "CreateCognitoExternalUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalCognitoUserSourceConfig"
              }
            ]
          },
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        },
        "required": [
          "name",
          "configuration",
          "index"
        ]
      },
      "FirebaseServiceAccountConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": ""
          },
          "project_id": {
            "type": "string",
            "description": ""
          },
          "private_key_id": {
            "type": "string",
            "description": ""
          },
          "private_key": {
            "type": "string",
            "description": ""
          },
          "client_email": {
            "type": "string",
            "description": ""
          },
          "client_id": {
            "type": "string",
            "description": ""
          },
          "auth_uri": {
            "type": "string",
            "description": ""
          },
          "token_uri": {
            "type": "string",
            "description": ""
          },
          "auth_provider_x509_cert_url": {
            "type": "string",
            "description": ""
          },
          "client_x509_cert_url": {
            "type": "string",
            "description": ""
          },
          "universe_domain": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "type",
          "project_id",
          "private_key_id",
          "private_key",
          "client_email",
          "client_id",
          "auth_uri",
          "token_uri",
          "auth_provider_x509_cert_url",
          "client_x509_cert_url",
          "universe_domain"
        ]
      },
      "ExternalFirebaseUserSourceConfig": {
        "type": "object",
        "properties": {
          "syncOnLogin": {
            "type": "boolean",
            "description": "Whether to sync user profile attributes on each login"
          },
          "isMigrated": {
            "type": "boolean",
            "description": "Whether to migrate the users"
          },
          "apiKey": {
            "type": "string",
            "description": "The firebase Web API Key"
          },
          "serviceAccount": {
            "$ref": "#/components/schemas/FirebaseServiceAccountConfig",
            "description": ""
          },
          "tenantConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserSourceStaticTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceNewTenantConfig"
              }
            ],
            "description": ""
          }
        },
        "required": [
          "syncOnLogin",
          "isMigrated",
          "apiKey",
          "serviceAccount",
          "tenantConfig"
        ]
      },
      "CreateFirebaseExternalUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFirebaseUserSourceConfig"
              }
            ]
          },
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        },
        "required": [
          "name",
          "configuration",
          "index"
        ]
      },
      "ExternalCustomCodeUserSourceConfig": {
        "type": "object",
        "properties": {
          "syncOnLogin": {
            "type": "boolean",
            "description": "Whether to sync user profile attributes on each login"
          },
          "isMigrated": {
            "type": "boolean",
            "description": "Whether to migrate the users"
          },
          "codePayload": {
            "type": "string",
            "description": ""
          },
          "getUserCodePayload": {
            "type": "string",
            "description": ""
          },
          "tenantConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserSourceNewTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceFromSourceTenantConfig"
              }
            ],
            "description": ""
          }
        },
        "required": [
          "syncOnLogin",
          "isMigrated",
          "codePayload",
          "tenantConfig"
        ]
      },
      "CreateCustomCodeExternalUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalCustomCodeUserSourceConfig"
              }
            ]
          },
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        },
        "required": [
          "name",
          "configuration",
          "index"
        ]
      },
      "FederationUserSourceConfig": {
        "type": "object",
        "properties": {
          "syncOnLogin": {
            "type": "boolean",
            "description": "Whether to sync user profile attributes on each login"
          },
          "wellknownUrl": {
            "type": "string",
            "description": "The url of the service provider"
          },
          "clientId": {
            "type": "string",
            "description": "The client id from the service provider"
          },
          "secret": {
            "type": "string",
            "description": "The secret from the service provider"
          },
          "tenantConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserSourceDynamicTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceStaticTenantConfig"
              },
              {
                "$ref": "#/components/schemas/UserSourceNewTenantConfig"
              }
            ],
            "description": ""
          }
        },
        "required": [
          "syncOnLogin",
          "wellknownUrl",
          "clientId",
          "secret",
          "tenantConfig"
        ]
      },
      "CreateFederationUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/FederationUserSourceConfig"
              }
            ]
          },
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        },
        "required": [
          "name",
          "configuration",
          "index"
        ]
      },
      "UpdateExternalAuth0UserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalAuth0UserSourceConfig"
              }
            ]
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        }
      },
      "UpdateExternalCognitoUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalCognitoUserSourceConfig"
              }
            ]
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        }
      },
      "UpdateExternalFirebaseUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalFirebaseUserSourceConfig"
              }
            ]
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        }
      },
      "UpdateExternalCustomCodeUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalCustomCodeUserSourceConfig"
              }
            ]
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        }
      },
      "UpdateFederationUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user source name"
          },
          "configuration": {
            "description": "User source configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/FederationUserSourceConfig"
              }
            ]
          },
          "index": {
            "type": "number",
            "description": "The user source index"
          },
          "description": {
            "type": "string",
            "description": "The user source description"
          }
        }
      },
      "AssignApplicationsToUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userSourceId": {
            "type": "string",
            "description": "The user source id"
          }
        },
        "required": [
          "appIds",
          "userSourceId"
        ]
      },
      "UnassignApplicationsFromUserSourceRequestDTO": {
        "type": "object",
        "properties": {
          "appIds": {
            "description": "The application Ids to assign to this user source",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userSourceId": {
            "type": "string",
            "description": "The user source id"
          }
        },
        "required": [
          "appIds",
          "userSourceId"
        ]
      },
      "GetUserSourceUsersResponseDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "email",
          "lastLogin"
        ]
      },
      "ActivationStrategyResponse": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "code",
              "link"
            ],
            "description": ""
          },
          "codeExpiration": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "strategy",
          "codeExpiration"
        ]
      },
      "CreateOrUpdateActivationStrategyRequest": {
        "type": "object",
        "properties": {
          "codeExpiration": {
            "type": "number",
            "minimum": 60,
            "description": ""
          },
          "strategy": {
            "type": "string",
            "enum": [
              "code",
              "link"
            ],
            "description": ""
          }
        },
        "required": [
          "strategy"
        ]
      },
      "InvitationStrategyResponse": {
        "type": "object",
        "properties": {
          "strategy": {
            "type": "string",
            "enum": [
              "code",
              "link"
            ],
            "description": ""
          },
          "codeExpiration": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "strategy",
          "codeExpiration"
        ]
      },
      "CreateOrUpdateInvitationStrategyRequest": {
        "type": "object",
        "properties": {
          "codeExpiration": {
            "type": "number",
            "description": ""
          }
        }
      },
      "PasswordRotationConfigurationResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "isActive": {
            "type": "boolean",
            "description": ""
          },
          "rotationPeriod": {
            "type": "number",
            "description": ""
          },
          "notificationPeriod": {
            "type": "number",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "isActive",
          "rotationPeriod",
          "notificationPeriod",
          "tenantId"
        ]
      },
      "CreateOrUpdatePasswordRotationDto": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Indicates whether password expiration is enabled",
            "default": false
          },
          "rotationPeriod": {
            "type": "number",
            "minimum": 1,
            "maximum": 2628000,
            "description": "The password expiration period, in minutes",
            "default": 129600
          },
          "notificationPeriod": {
            "type": "number",
            "minimum": 0,
            "maximum": 2628000,
            "description": "Notification period before password expiration, in minutes",
            "default": 10080
          }
        }
      },
      "GetUserEmailsPolicyResponseDto": {
        "type": "object",
        "properties": {
          "allowEmailChange": {
            "type": "boolean",
            "description": "Indicates whether email change has been enabled or disabled.",
            "example": "true"
          }
        },
        "required": [
          "allowEmailChange"
        ]
      },
      "CreateUserEmailsPolicyRequestDto": {
        "type": "object",
        "properties": {
          "allowEmailChange": {
            "type": "boolean",
            "description": "Used to enable or disable email change for users.",
            "example": "true"
          }
        }
      },
      "UsernameResponseDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username value",
            "example": "user.name"
          },
          "userId": {
            "type": "string",
            "description": "The user id value",
            "example": "user-id"
          }
        },
        "required": [
          "username",
          "userId"
        ]
      },
      "CreateUsernameRequestDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username to create. Allowed characters: alphanumeric (a-z, 0-9), ^, $, ., !, -, #, +, ', ~, _ (no spaces, no accents, automatically converted to lowercase). Max length: 128 characters.",
            "example": "john.doe$!#-+'~_"
          }
        },
        "required": [
          "username"
        ]
      },
      "SelfEmailUpdateRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email to update to"
          }
        },
        "required": [
          "email"
        ]
      },
      "SelfEmailUpdateVerifyRequestDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code for the user to verify their email"
          },
          "email": {
            "type": "string",
            "description": "The email for the user to verify their email"
          }
        },
        "required": [
          "code",
          "email"
        ]
      },
      "CreateOrUpdateIpRestrictionConfigDto": {
        "type": "object",
        "properties": {
          "strategy": {
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "type": "string",
            "description": ""
          },
          "isActive": {
            "type": "boolean",
            "description": ""
          }
        }
      },
      "GetIpRestrictionResponse": {
        "type": "object",
        "properties": {}
      },
      "CreateOrUpdateIpRestrictionDto": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP or CIDR (v4 and v6 are supported)"
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "strategy": {
            "type": "string",
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "description": ""
          },
          "isActive": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "ip",
          "strategy"
        ]
      },
      "DomainRestrictionsCreateRequest": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "pattern": "domainRegex",
            "description": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "description": ""
          }
        },
        "required": [
          "domain",
          "type"
        ]
      },
      "DomainRestrictionsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "domain": {
            "type": "string",
            "description": ""
          },
          "type": {
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "domain",
          "type"
        ]
      },
      "DomainRestrictionsConfigResponse": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "listType": {
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "type": "string",
            "description": ""
          },
          "blockPublicDomains": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "active",
          "listType",
          "blockPublicDomains"
        ]
      },
      "DomainRestrictionsConfigUpdateRequest": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": ""
          },
          "blockPublicDomains": {
            "type": "boolean",
            "description": ""
          },
          "type": {
            "type": "string",
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "description": ""
          }
        },
        "required": [
          "active"
        ]
      },
      "DomainRestrictionsBulkRequestRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ALLOW",
              "BLOCK"
            ],
            "description": ""
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "domainRegexString"
            },
            "description": ""
          }
        },
        "required": [
          "type",
          "domains"
        ]
      },
      "CreateSmsVendorConfigRequest": {
        "type": "object",
        "properties": {
          "senderName": {
            "type": "string",
            "description": "The sender name will be used only when alphanumeric sender is supported in the recipient country. This is usually a phone number or the name of the sender, dependeing on what is configured on your Twilio account"
          },
          "accountId": {
            "type": "string",
            "description": "account ID"
          },
          "token": {
            "type": "string",
            "description": "token"
          },
          "serviceId": {
            "type": "string",
            "description": "service ID"
          },
          "provider": {
            "type": "string",
            "description": "provider"
          },
          "channel": {
            "type": "string",
            "description": "channel"
          }
        }
      },
      "SmsVendorConfigResponse": {
        "type": "object",
        "properties": {}
      },
      "SmsTemplateResponse": {
        "type": "object",
        "properties": {}
      },
      "CreateSmsTemplateRequest": {
        "type": "object",
        "properties": {}
      },
      "VendorConfigBasicResponse": {
        "type": "object",
        "properties": {
          "forcePermissions": {
            "type": "boolean",
            "description": ""
          },
          "machineToMachineAuthStrategy": {
            "type": "string",
            "enum": [
              "ClientCredentials",
              "AccessToken"
            ],
            "description": ""
          }
        },
        "required": [
          "forcePermissions",
          "machineToMachineAuthStrategy"
        ]
      },
      "ActivateUserDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "lastTermsCheck": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "token"
        ]
      },
      "UserMFAWebAuthnDeviceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "deviceType": {
            "type": "string",
            "enum": [
              "Platform",
              "CrossPlatform"
            ],
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "deviceType",
          "name"
        ]
      },
      "UserMFAPhoneDeviceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "phoneNumber"
        ]
      },
      "UserMFAAuthenticatorAppResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id"
        ]
      },
      "UserMFAEmailCodeResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "email"
        ]
      },
      "UserMFADevicesResponse": {
        "type": "object",
        "properties": {
          "webauthn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMFAWebAuthnDeviceResponse"
            },
            "description": ""
          },
          "phones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMFAPhoneDeviceResponse"
            },
            "description": ""
          },
          "authenticators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMFAAuthenticatorAppResponse"
            },
            "description": ""
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMFAEmailCodeResponse"
            },
            "description": ""
          }
        },
        "required": [
          "webauthn",
          "phones",
          "authenticators",
          "emails"
        ]
      },
      "AuthenticationResponseDto": {
        "type": "object",
        "properties": {
          "tokenType": {
            "type": "string",
            "default": "bearer",
            "description": ""
          },
          "otcToken": {
            "type": "string",
            "description": ""
          },
          "mfaRequired": {
            "type": "boolean",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "resetPasswordToken": {
            "type": "string",
            "description": ""
          },
          "passwordExpiresIn": {
            "type": "number",
            "description": ""
          },
          "notificationPeriod": {
            "type": "number",
            "description": ""
          },
          "mfaEnrolled": {
            "type": "boolean",
            "description": ""
          },
          "mfaDevices": {
            "$ref": "#/components/schemas/UserMFADevicesResponse",
            "description": ""
          },
          "mfaStrategies": {
            "type": "object",
            "description": ""
          },
          "qrCode": {
            "type": "string",
            "description": ""
          },
          "recoveryCode": {
            "type": "string",
            "description": ""
          },
          "accessToken": {
            "type": "string",
            "description": ""
          },
          "refreshToken": {
            "type": "string",
            "description": ""
          },
          "expiresIn": {
            "type": "number",
            "description": ""
          },
          "expires": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "userEmail": {
            "type": "string",
            "description": ""
          },
          "emailVerified": {
            "type": "boolean",
            "description": ""
          },
          "isBreachedPassword": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "mfaRequired",
          "accessToken",
          "refreshToken",
          "expiresIn",
          "expires"
        ]
      },
      "ActivateUserWithCodeDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "lastTermsCheck": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "token",
          "code"
        ]
      },
      "GetActivateStrategyResponseDto": {
        "type": "object",
        "properties": {
          "shouldSetPassword": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "shouldSetPassword"
        ]
      },
      "AuthenticateUserPasswordDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": ""
          },
          "username": {
            "type": "string",
            "description": "Username. Either email or username must be provided."
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "invitationToken": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {}
      },
      "AuthApiTokenDto": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": ""
          },
          "secret": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientId",
          "secret"
        ]
      },
      "ApiTokenAuthV2Response": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": ""
          },
          "refresh_token": {
            "type": "string",
            "description": ""
          },
          "expires_in": {
            "type": "number",
            "description": ""
          },
          "expires": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "expires_in",
          "expires"
        ]
      },
      "RefreshApiTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "PasswordlessAuthenticationSmsOtcPreloginDto": {
        "type": "object",
        "properties": {
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "invitationToken": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "username": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "email",
          "userId",
          "username",
          "phoneNumber"
        ]
      },
      "PasswordlessAuthenticationSmsOTCPreloginResponseDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": ""
          },
          "resetPhoneNumberToken": {
            "type": "string",
            "description": ""
          }
        }
      },
      "AuthenticateUserPasswordlessDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "One time code to login with - get it from the email sent after prelogin request"
          },
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "invitationToken": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "token"
        ]
      },
      "PasswordlessAuthenticationPreloginDto": {
        "type": "object",
        "properties": {
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "invitationToken": {
            "type": "string",
            "description": ""
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "username": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "email",
          "userId",
          "username"
        ]
      },
      "VerifyMFAAuthAppRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "rememberDevice": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "value",
          "mfaToken"
        ]
      },
      "AuthRequestVerifyMfaRequest": {
        "type": "object",
        "properties": {
          "mfaToken": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "mfaToken"
        ]
      },
      "VerifyMFAEmailOTCRequest": {
        "type": "object",
        "properties": {
          "otcToken": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "rememberDevice": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "otcToken",
          "code",
          "mfaToken"
        ]
      },
      "AuthRequestEnrollMFARequest": {
        "type": "object",
        "properties": {
          "mfaToken": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "mfaToken"
        ]
      },
      "VerifyEnrollMFAAuthAppRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "rememberDevice": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "token",
          "mfaToken"
        ]
      },
      "RequestEnrollMFASMSRequest": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "pattern": "phoneNumberRegexp",
            "description": ""
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "VerifyEnrollMFASMSRequest": {
        "type": "object",
        "properties": {
          "otcToken": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "otcToken",
          "code"
        ]
      },
      "VerifyMFASMSRequest": {
        "type": "object",
        "properties": {
          "otcToken": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "rememberDevice": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "otcToken",
          "code",
          "mfaToken"
        ]
      },
      "WebAuthNClientResponse": {
        "type": "object",
        "properties": {
          "clientDataJSON": {
            "type": "string",
            "description": ""
          },
          "attestationObject": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientDataJSON",
          "attestationObject"
        ]
      },
      "VerifyNewWebAuthnDeviceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "response": {
            "$ref": "#/components/schemas/WebAuthNClientResponse",
            "description": ""
          },
          "deviceType": {
            "type": "string",
            "enum": [
              "Platform",
              "CrossPlatform"
            ],
            "description": ""
          }
        },
        "required": [
          "id",
          "response"
        ]
      },
      "VerifyEnrollMFAWebAuthnRequest": {
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string",
            "enum": [
              "Platform",
              "CrossPlatform"
            ],
            "description": ""
          },
          "webauthnToken": {
            "type": "string",
            "description": ""
          },
          "options": {
            "$ref": "#/components/schemas/VerifyNewWebAuthnDeviceRequest",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "rememberDevice": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "deviceType",
          "webauthnToken",
          "options",
          "mfaToken"
        ]
      },
      "WebAuthNResponse": {
        "type": "object",
        "properties": {
          "clientDataJSON": {
            "type": "string",
            "description": ""
          },
          "authenticatorData": {
            "type": "string",
            "description": ""
          },
          "signature": {
            "type": "string",
            "description": ""
          },
          "userHandle": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "clientDataJSON",
          "authenticatorData",
          "signature",
          "userHandle"
        ]
      },
      "AuthenticateUserWebAuthNDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "response": {
            "$ref": "#/components/schemas/WebAuthNResponse",
            "description": ""
          },
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "invitationToken": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "response"
        ]
      },
      "VerifyMFAWebAuthnRequest": {
        "type": "object",
        "properties": {
          "webauthnToken": {
            "type": "string",
            "description": ""
          },
          "options": {
            "$ref": "#/components/schemas/AuthenticateUserWebAuthNDto",
            "description": ""
          },
          "mfaToken": {
            "type": "string",
            "description": ""
          },
          "rememberDevice": {
            "type": "boolean",
            "description": ""
          }
        },
        "required": [
          "webauthnToken",
          "options",
          "mfaToken"
        ]
      },
      "CheckAllowRememberResponse": {
        "type": "object",
        "properties": {}
      },
      "RequestEnrollAuthenticatorAppMfaResponse": {
        "type": "object",
        "properties": {
          "qrCode": {
            "type": "string",
            "description": "QR code to be verified by authenticator app"
          }
        },
        "required": [
          "qrCode"
        ]
      },
      "VerifyEnrollMFAUserAuthAppRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "token"
        ]
      },
      "VerifyEnrollMFAResponse": {
        "type": "object",
        "properties": {
          "recoveryCode": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "recoveryCode"
        ]
      },
      "AcceptInvitationDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "token"
        ]
      },
      "AcceptInvitationWithCodeDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": ""
          },
          "token": {
            "type": "string",
            "description": ""
          },
          "code": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "userId",
          "token",
          "code"
        ]
      },
      "SignUpUserEmailDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "local",
              "saml",
              "google",
              "github",
              "facebook",
              "microsoft",
              "scim2",
              "slack",
              "apple"
            ],
            "description": ""
          },
          "metadata": {
            "type": "string",
            "description": "Stringified JSON object. Use the JSON.stringify() method."
          },
          "email": {
            "type": "string",
            "description": ""
          },
          "username": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "profilePictureUrl": {
            "type": "string",
            "maxLength": 4095,
            "description": ""
          },
          "password": {
            "type": "string",
            "description": ""
          },
          "skipInviteEmail": {
            "type": "boolean",
            "description": ""
          },
          "roleIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          "emailMetadata": {
            "type": "object",
            "description": ""
          },
          "companyName": {
            "type": "string",
            "description": ""
          },
          "recaptchaToken": {
            "type": "string",
            "description": ""
          },
          "invitationToken": {
            "type": "string",
            "description": ""
          },
          "phoneNumber": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "provider",
          "email",
          "companyName"
        ]
      },
      "SignUpResponseDto": {
        "type": "object",
        "properties": {
          "shouldActivate": {
            "type": "boolean",
            "description": ""
          },
          "userId": {
            "type": "string",
            "description": ""
          },
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "authResponse": {
            "$ref": "#/components/schemas/AuthenticationResponseDto",
            "description": ""
          },
          "activationToken": {
            "type": "string",
            "description": ""
          }
        }
      },
      "UserTenantDataDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "tenantId",
          "name"
        ]
      },
      "GetUserTenantsHierarchyResponseDto": {
        "type": "object",
        "properties": {}
      },
      "MeAuthorizationResponseDto": {
        "type": "object",
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleResponse"
            },
            "description": ""
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionResponse"
            },
            "description": ""
          }
        },
        "required": [
          "roles",
          "permissions"
        ]
      },
      "GetUserTenantsResponseDto": {
        "type": "object",
        "properties": {}
      }
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "x-tagGroups": [
    {
      "name": "Authentication",
      "tags": [
        "API token",
        "General",
        "MFA",
        "Passwordless",
        "SMS"
      ]
    },
    {
      "name": "Management",
      "tags": [
        "Account invitations settings",
        "Core settings",
        "Custom social OAuth provider",
        "Data migration",
        "Delegation",
        "Email configuration",
        "Email templates",
        "M2M tokens",
        "MFA configuration",
        "Permissions categories",
        "Permissions",
        "Roles",
        "SMS configuration",
        "SMS templates",
        "Sessions configuration",
        "User pools",
        "Users"
      ]
    },
    {
      "name": "Self-Service",
      "tags": [
        "Account invitations",
        "Account roles",
        "API tokens",
        "Domain restrictions",
        "IP restrictions",
        "Lockout policy",
        "MFA settings",
        "Password settings",
        "Personal tokens",
        "Sessions management",
        "User groups",
        "User management",
        "User sessions"
      ]
    },
    {
      "name": "Applications",
      "tags": [
        "Users-applications management"
      ]
    }
  ]
}
